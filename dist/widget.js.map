{"version":3,"file":"widget.js","sources":["../node_modules/@lit/reactive-element/decorators/custom-element.js","../node_modules/@lit/reactive-element/css-tag.js","../node_modules/@lit/reactive-element/reactive-element.js","../node_modules/@lit/reactive-element/decorators/property.js","../node_modules/@lit/reactive-element/decorators/state.js","../utils.ts","../analyser.ts","../node_modules/three/examples/jsm/libs/fflate.module.js","../node_modules/three/examples/jsm/loaders/EXRLoader.js","../node_modules/three/examples/jsm/shaders/CopyShader.js","../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","../node_modules/three/examples/jsm/shaders/FXAAShader.js","../backdrop-shader.ts","../sphere-shader.ts","../visual-3d.ts","../index.tsx","../widget.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=t=>(e,o)=>{void 0!==o?o.addInitializer((()=>{customElements.define(t,e)})):customElements.define(t,e)};export{t as customElement};\n//# sourceMappingURL=custom-element.js.map\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class n{constructor(t,e,o){if(this._$cssResult$=!0,o!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new n(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[o+1]),t[0]);return new n(o,t,s)},S=(s,o)=>{if(e)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement(\"style\"),n=t.litNonce;void 0!==n&&o.setAttribute(\"nonce\",n),o.textContent=e.cssText,s.appendChild(o)}},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;export{n as CSSResult,S as adoptStyles,i as css,c as getCompatibleStyle,e as supportsAdoptingStyleSheets,r as unsafeCSS};\n//# sourceMappingURL=css-tag.js.map\n","import{getCompatibleStyle as t,adoptStyles as s}from\"./css-tag.js\";export{CSSResult,css,supportsAdoptingStyleSheets,unsafeCSS}from\"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{is:i,defineProperty:e,getOwnPropertyDescriptor:h,getOwnPropertyNames:r,getOwnPropertySymbols:o,getPrototypeOf:n}=Object,a=globalThis,c=a.trustedTypes,l=c?c.emptyScript:\"\",p=a.reactiveElementPolyfillSupport,d=(t,s)=>t,u={toAttribute(t,s){switch(s){case Boolean:t=t?l:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},f=(t,s)=>!i(t,s),b={attribute:!0,type:String,converter:u,reflect:!1,useDefault:!1,hasChanged:f};Symbol.metadata??=Symbol(\"metadata\"),a.litPropertyMetadata??=new WeakMap;class y extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=b){if(s.state&&(s.attribute=!1),this._$Ei(),this.prototype.hasOwnProperty(t)&&((s=Object.create(s)).wrapped=!0),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),h=this.getPropertyDescriptor(t,i,s);void 0!==h&&e(this.prototype,t,h)}}static getPropertyDescriptor(t,s,i){const{get:e,set:r}=h(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t}};return{get:e,set(s){const h=e?.call(this);r?.call(this,s),this.requestUpdate(t,h,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??b}static _$Ei(){if(this.hasOwnProperty(d(\"elementProperties\")))return;const t=n(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(d(\"finalized\")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d(\"properties\"))){const t=this.properties,s=[...r(t),...o(t)];for(const i of s)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(t(s))}else void 0!==s&&i.push(t(s));return i}static _$Eu(t,s){const i=s.attribute;return!1===i?void 0:\"string\"==typeof i?i:\"string\"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return s(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()))}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()))}attributeChangedCallback(t,s,i){this._$AK(t,i)}_$ET(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const h=(void 0!==i.converter?.toAttribute?i.converter:u).toAttribute(s,i.type);this._$Em=t,null==h?this.removeAttribute(e):this.setAttribute(e,h),this._$Em=null}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),h=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u;this._$Em=e,this[e]=h.fromAttribute(s,t.type)??this._$Ej?.get(e)??null,this._$Em=null}}requestUpdate(t,s,i){if(void 0!==t){const e=this.constructor,h=this[t];if(i??=e.getPropertyOptions(t),!((i.hasChanged??f)(h,s)||i.useDefault&&i.reflect&&h===this._$Ej?.get(t)&&!this.hasAttribute(e._$Eu(t,i))))return;this.C(t,s,i)}!1===this.isUpdatePending&&(this._$ES=this._$EP())}C(t,s,{useDefault:i,reflect:e,wrapped:h},r){i&&!(this._$Ej??=new Map).has(t)&&(this._$Ej.set(t,r??s??this[t]),!0!==h||void 0!==r)||(this._$AL.has(t)||(this.hasUpdated||i||(s=void 0),this._$AL.set(t,s)),!0===e&&this._$Em!==t&&(this._$Eq??=new Set).add(t))}async _$EP(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t){const{wrapped:t}=i,e=this[s];!0!==t||this._$AL.has(s)||void 0===e||this.C(s,void 0,i,e)}}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EM()}catch(s){throw t=!1,this._$EM(),s}t&&this._$AE(s)}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EM(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Eq&&=this._$Eq.forEach((t=>this._$ET(t,this[t]))),this._$EM()}updated(t){}firstUpdated(t){}}y.elementStyles=[],y.shadowRootOptions={mode:\"open\"},y[d(\"elementProperties\")]=new Map,y[d(\"finalized\")]=new Map,p?.({ReactiveElement:y}),(a.reactiveElementVersions??=[]).push(\"2.1.0\");export{y as ReactiveElement,s as adoptStyles,u as defaultConverter,t as getCompatibleStyle,f as notEqual};\n//# sourceMappingURL=reactive-element.js.map\n","import{defaultConverter as t,notEqual as e}from\"../reactive-element.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const o={attribute:!0,type:String,converter:t,reflect:!1,hasChanged:e},r=(t=o,e,r)=>{const{kind:n,metadata:i}=r;let s=globalThis.litPropertyMetadata.get(i);if(void 0===s&&globalThis.litPropertyMetadata.set(i,s=new Map),\"setter\"===n&&((t=Object.create(t)).wrapped=!0),s.set(r.name,t),\"accessor\"===n){const{name:o}=r;return{set(r){const n=e.get.call(this);e.set.call(this,r),this.requestUpdate(o,n,t)},init(e){return void 0!==e&&this.C(o,void 0,t,e),e}}}if(\"setter\"===n){const{name:o}=r;return function(r){const n=this[o];e.call(this,r),this.requestUpdate(o,n,t)}}throw Error(\"Unsupported decorator location: \"+n)};function n(t){return(e,o)=>\"object\"==typeof o?r(t,e,o):((t,e,o)=>{const r=e.hasOwnProperty(o);return e.constructor.createProperty(o,t),r?Object.getOwnPropertyDescriptor(e,o):void 0})(t,e,o)}export{n as property,r as standardProperty};\n//# sourceMappingURL=property.js.map\n","import{property as t}from\"./property.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */function r(r){return t({...r,state:!0,attribute:!1})}export{r as state};\n//# sourceMappingURL=state.js.map\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\nimport {Blob} from '@google/genai';\n\nfunction encode(bytes: Uint8Array): string {\n  let binary = '';\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n\nfunction decode(base64: string): Uint8Array {\n  const binaryString = atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\n\nfunction createBlob(data: Float32Array): Blob {\n  const l = data.length;\n  const int16 = new Int16Array(l);\n  for (let i = 0; i < l; i++) {\n    // convert float32 -1 to 1 to int16 -32768 to 32767\n    int16[i] = data[i] * 32768;\n  }\n\n  return {\n    data: encode(new Uint8Array(int16.buffer)),\n    mimeType: 'audio/pcm;rate=16000',\n  };\n}\n\nasync function decodeAudioData(\n  data: Uint8Array,\n  ctx: AudioContext,\n  sampleRate: number,\n  numChannels: number,\n): Promise<AudioBuffer> {\n  if (numChannels <= 0) {\n    console.error(\"decodeAudioData: numChannels must be positive.\");\n    // Return a minimal valid buffer or throw an error, depending on desired strictness\n    // For now, returning a very short silent buffer to prevent downstream crashes.\n    return ctx.createBuffer(1, 1, sampleRate); \n  }\n\n  const buffer = ctx.createBuffer(\n    numChannels,\n    data.length / 2 / numChannels, // This is frames per channel; data.length is byte length of PCM S16LE\n    sampleRate,\n  );\n\n  const dataInt16 = new Int16Array(data.buffer, data.byteOffset, data.length / 2);\n  const dataFloat32 = new Float32Array(dataInt16.length);\n  for (let i = 0; i < dataInt16.length; i++) {\n    dataFloat32[i] = dataInt16[i] / 32768.0;\n  }\n  \n  // Handles both mono (numChannels === 1) and stereo/multi-channel de-interleaving\n  for (let i = 0; i < numChannels; i++) {\n    const channelData = new Float32Array(buffer.length); // buffer.length is frames per channel\n    for (let j = 0; j < buffer.length; j++) {\n      channelData[j] = dataFloat32[j * numChannels + i];\n    }\n    buffer.copyToChannel(channelData, i);\n  }\n\n  return buffer;\n}\n\nexport {createBlob, decode, decodeAudioData, encode};","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\n/**\n * Analyser class for live audio visualisation.\n */\nexport class Analyser {\n  private analyser: AnalyserNode;\n  private bufferLength = 0;\n  private dataArray: Uint8Array;\n\n  constructor(node: AudioNode) {\n    this.analyser = node.context.createAnalyser();\n    this.analyser.fftSize = 32;\n    this.bufferLength = this.analyser.frequencyBinCount;\n    this.dataArray = new Uint8Array(this.bufferLength);\n    node.connect(this.analyser);\n  }\n\n  update() {\n    this.analyser.getByteFrequencyData(this.dataArray);\n  }\n\n  get data() {\n    return this.dataArray;\n  }\n}\n","/*!\nfflate - fast JavaScript compression/decompression\n<https://101arrowz.github.io/fflate>\nLicensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE\nversion 0.8.2\n*/\n\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tNoColorSpace,\n\tLinearFilter,\n\tLinearSRGBColorSpace,\n\tRedFormat,\n\tRGBAFormat\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n// Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n// implementation, so I have preserved their copyright notices.\n\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n\n// // End of OpenEXR license -------------------------------------------------\n\n\n/**\n * A loader for the OpenEXR texture format.\n *\n * `EXRLoader` currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * ```js\n * const loader = new EXRLoader();\n * const texture = await loader.loadAsync( 'textures/memorial.exr' );\n * ```\n *\n * @augments DataTextureLoader\n * @three_import import { EXRLoader } from 'three/addons/loaders/EXRLoader.js';\n */\nclass EXRLoader extends DataTextureLoader {\n\n\t/**\n\t * Constructs a new EXR loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The texture type.\n\t\t *\n\t\t * @type {(HalfFloatType|FloatType)}\n\t\t * @default HalfFloatType\n\t\t */\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t/**\n\t * Parses the given EXR texture data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw texture data.\n\t * @return {DataTextureLoader~TexData} An object representing the parsed texture data.\n\t */\n\tparse( buffer ) {\n\n\t\tconst USHORT_RANGE = ( 1 << 16 );\n\t\tconst BITMAP_SIZE = ( USHORT_RANGE >> 3 );\n\n\t\tconst HUF_ENCBITS = 16; // literal (value) bit length\n\t\tconst HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n\t\tconst HUF_ENCSIZE = ( 1 << HUF_ENCBITS ) + 1; // encoding table size\n\t\tconst HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\t\tconst HUF_DECMASK = HUF_DECSIZE - 1;\n\n\t\tconst NBITS = 16;\n\t\tconst A_OFFSET = 1 << ( NBITS - 1 );\n\t\tconst MOD_MASK = ( 1 << NBITS ) - 1;\n\n\t\tconst SHORT_ZEROCODE_RUN = 59;\n\t\tconst LONG_ZEROCODE_RUN = 63;\n\t\tconst SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n\n\t\tconst ULONG_SIZE = 8;\n\t\tconst FLOAT32_SIZE = 4;\n\t\tconst INT32_SIZE = 4;\n\t\tconst INT16_SIZE = 2;\n\t\tconst INT8_SIZE = 1;\n\n\t\tconst STATIC_HUFFMAN = 0;\n\t\tconst DEFLATE = 1;\n\n\t\tconst UNKNOWN = 0;\n\t\tconst LOSSY_DCT = 1;\n\t\tconst RLE = 2;\n\n\t\tconst logBase = Math.pow( 2.7182818, 2.2 );\n\n\t\tfunction reverseLutFromBitmap( bitmap, lut ) {\n\n\t\t\tlet k = 0;\n\n\t\t\tfor ( let i = 0; i < USHORT_RANGE; ++ i ) {\n\n\t\t\t\tif ( ( i == 0 ) || ( bitmap[ i >> 3 ] & ( 1 << ( i & 7 ) ) ) ) {\n\n\t\t\t\t\tlut[ k ++ ] = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst n = k - 1;\n\n\t\t\twhile ( k < USHORT_RANGE ) lut[ k ++ ] = 0;\n\n\t\t\treturn n;\n\n\t\t}\n\n\t\tfunction hufClearDecTable( hdec ) {\n\n\t\t\tfor ( let i = 0; i < HUF_DECSIZE; i ++ ) {\n\n\t\t\t\thdec[ i ] = {};\n\t\t\t\thdec[ i ].len = 0;\n\t\t\t\thdec[ i ].lit = 0;\n\t\t\t\thdec[ i ].p = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getBitsReturn = { l: 0, c: 0, lc: 0 };\n\n\t\tfunction getBits( nBits, c, lc, uInt8Array, inOffset ) {\n\n\t\t\twhile ( lc < nBits ) {\n\n\t\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\t\tlc += 8;\n\n\t\t\t}\n\n\t\t\tlc -= nBits;\n\n\t\t\tgetBitsReturn.l = ( c >> lc ) & ( ( 1 << nBits ) - 1 );\n\t\t\tgetBitsReturn.c = c;\n\t\t\tgetBitsReturn.lc = lc;\n\n\t\t}\n\n\t\tconst hufTableBuffer = new Array( 59 );\n\n\t\tfunction hufCanonicalCodeTable( hcode ) {\n\n\t\t\tfor ( let i = 0; i <= 58; ++ i ) hufTableBuffer[ i ] = 0;\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) hufTableBuffer[ hcode[ i ] ] += 1;\n\n\t\t\tlet c = 0;\n\n\t\t\tfor ( let i = 58; i > 0; -- i ) {\n\n\t\t\t\tconst nc = ( ( c + hufTableBuffer[ i ] ) >> 1 );\n\t\t\t\thufTableBuffer[ i ] = c;\n\t\t\t\tc = nc;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) {\n\n\t\t\t\tconst l = hcode[ i ];\n\t\t\t\tif ( l > 0 ) hcode[ i ] = l | ( hufTableBuffer[ l ] ++ << 6 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction hufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, hcode ) {\n\n\t\t\tconst p = inOffset;\n\t\t\tlet c = 0;\n\t\t\tlet lc = 0;\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tif ( p.value - inOffset.value > ni ) return false;\n\n\t\t\t\tgetBits( 6, c, lc, uInt8Array, p );\n\n\t\t\t\tconst l = getBitsReturn.l;\n\t\t\t\tc = getBitsReturn.c;\n\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\thcode[ im ] = l;\n\n\t\t\t\tif ( l == LONG_ZEROCODE_RUN ) {\n\n\t\t\t\t\tif ( p.value - inOffset.value > ni ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgetBits( 8, c, lc, uInt8Array, p );\n\n\t\t\t\t\tlet zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n\t\t\t\t\tc = getBitsReturn.c;\n\t\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t} else if ( l >= SHORT_ZEROCODE_RUN ) {\n\n\t\t\t\t\tlet zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thufCanonicalCodeTable( hcode );\n\n\t\t}\n\n\t\tfunction hufLength( code ) {\n\n\t\t\treturn code & 63;\n\n\t\t}\n\n\t\tfunction hufCode( code ) {\n\n\t\t\treturn code >> 6;\n\n\t\t}\n\n\t\tfunction hufBuildDecTable( hcode, im, iM, hdecod ) {\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tconst c = hufCode( hcode[ im ] );\n\t\t\t\tconst l = hufLength( hcode[ im ] );\n\n\t\t\t\tif ( c >> l ) {\n\n\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( l > HUF_DECBITS ) {\n\n\t\t\t\t\tconst pl = hdecod[ ( c >> ( l - HUF_DECBITS ) ) ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.lit ++;\n\n\t\t\t\t\tif ( pl.p ) {\n\n\t\t\t\t\t\tconst p = pl.p;\n\t\t\t\t\t\tpl.p = new Array( pl.lit );\n\n\t\t\t\t\t\tfor ( let i = 0; i < pl.lit - 1; ++ i ) {\n\n\t\t\t\t\t\t\tpl.p[ i ] = p[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpl.p = new Array( 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.p[ pl.lit - 1 ] = im;\n\n\t\t\t\t} else if ( l ) {\n\n\t\t\t\t\tlet plOffset = 0;\n\n\t\t\t\t\tfor ( let i = 1 << ( HUF_DECBITS - l ); i > 0; i -- ) {\n\n\t\t\t\t\t\tconst pl = hdecod[ ( c << ( HUF_DECBITS - l ) ) + plOffset ];\n\n\t\t\t\t\t\tif ( pl.len || pl.p ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpl.len = l;\n\t\t\t\t\t\tpl.lit = im;\n\n\t\t\t\t\t\tplOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst getCharReturn = { c: 0, lc: 0 };\n\n\t\tfunction getChar( c, lc, uInt8Array, inOffset ) {\n\n\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\tlc += 8;\n\n\t\t\tgetCharReturn.c = c;\n\t\t\tgetCharReturn.lc = lc;\n\n\t\t}\n\n\t\tconst getCodeReturn = { c: 0, lc: 0 };\n\n\t\tfunction getCode( po, rlc, c, lc, uInt8Array, inOffset, outBuffer, outBufferOffset, outBufferEndOffset ) {\n\n\t\t\tif ( po == rlc ) {\n\n\t\t\t\tif ( lc < 8 ) {\n\n\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t}\n\n\t\t\t\tlc -= 8;\n\n\t\t\t\tlet cs = ( c >> lc );\n\t\t\t\tcs = new Uint8Array( [ cs ] )[ 0 ];\n\n\t\t\t\tif ( outBufferOffset.value + cs > outBufferEndOffset ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tconst s = outBuffer[ outBufferOffset.value - 1 ];\n\n\t\t\t\twhile ( cs -- > 0 ) {\n\n\t\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = s;\n\n\t\t\t\t}\n\n\t\t\t} else if ( outBufferOffset.value < outBufferEndOffset ) {\n\n\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = po;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tgetCodeReturn.c = c;\n\t\t\tgetCodeReturn.lc = lc;\n\n\t\t}\n\n\t\tfunction UInt16( value ) {\n\n\t\t\treturn ( value & 0xFFFF );\n\n\t\t}\n\n\t\tfunction Int16( value ) {\n\n\t\t\tconst ref = UInt16( value );\n\t\t\treturn ( ref > 0x7FFF ) ? ref - 0x10000 : ref;\n\n\t\t}\n\n\t\tconst wdec14Return = { a: 0, b: 0 };\n\n\t\tfunction wdec14( l, h ) {\n\n\t\t\tconst ls = Int16( l );\n\t\t\tconst hs = Int16( h );\n\n\t\t\tconst hi = hs;\n\t\t\tconst ai = ls + ( hi & 1 ) + ( hi >> 1 );\n\n\t\t\tconst as = ai;\n\t\t\tconst bs = ai - hi;\n\n\t\t\twdec14Return.a = as;\n\t\t\twdec14Return.b = bs;\n\n\t\t}\n\n\t\tfunction wdec16( l, h ) {\n\n\t\t\tconst m = UInt16( l );\n\t\t\tconst d = UInt16( h );\n\n\t\t\tconst bb = ( m - ( d >> 1 ) ) & MOD_MASK;\n\t\t\tconst aa = ( d + bb - A_OFFSET ) & MOD_MASK;\n\n\t\t\twdec14Return.a = aa;\n\t\t\twdec14Return.b = bb;\n\n\t\t}\n\n\t\tfunction wav2Decode( buffer, j, nx, ox, ny, oy, mx ) {\n\n\t\t\tconst w14 = mx < ( 1 << 14 );\n\t\t\tconst n = ( nx > ny ) ? ny : nx;\n\t\t\tlet p = 1;\n\t\t\tlet p2;\n\t\t\tlet py;\n\n\t\t\twhile ( p <= n ) p <<= 1;\n\n\t\t\tp >>= 1;\n\t\t\tp2 = p;\n\t\t\tp >>= 1;\n\n\t\t\twhile ( p >= 1 ) {\n\n\t\t\t\tpy = 0;\n\t\t\t\tconst ey = py + oy * ( ny - p2 );\n\t\t\t\tconst oy1 = oy * p;\n\t\t\t\tconst oy2 = oy * p2;\n\t\t\t\tconst ox1 = ox * p;\n\t\t\t\tconst ox2 = ox * p2;\n\t\t\t\tlet i00, i01, i10, i11;\n\n\t\t\t\tfor ( ; py <= ey; py += oy2 ) {\n\n\t\t\t\t\tlet px = py;\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tconst p01 = px + ox1;\n\t\t\t\t\t\tconst p10 = px + oy1;\n\t\t\t\t\t\tconst p11 = p10 + ox1;\n\n\t\t\t\t\t\tif ( w14 ) {\n\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nx & p ) {\n\n\t\t\t\t\t\tconst p10 = px + oy1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ny & p ) {\n\n\t\t\t\t\tlet px = py;\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tconst p01 = px + ox1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p01 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p01 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tp2 = p;\n\t\t\t\tp >>= 1;\n\n\t\t\t}\n\n\t\t\treturn py;\n\n\t\t}\n\n\t\tfunction hufDecode( encodingTable, decodingTable, uInt8Array, inOffset, ni, rlc, no, outBuffer, outOffset ) {\n\n\t\t\tlet c = 0;\n\t\t\tlet lc = 0;\n\t\t\tconst outBufferEndOffset = no;\n\t\t\tconst inOffsetEnd = Math.trunc( inOffset.value + ( ni + 7 ) / 8 );\n\n\t\t\twhile ( inOffset.value < inOffsetEnd ) {\n\n\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\tc = getCharReturn.c;\n\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\twhile ( lc >= HUF_DECBITS ) {\n\n\t\t\t\t\tconst index = ( c >> ( lc - HUF_DECBITS ) ) & HUF_DECMASK;\n\t\t\t\t\tconst pl = decodingTable[ index ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! pl.p ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet j;\n\n\t\t\t\t\t\tfor ( j = 0; j < pl.lit; j ++ ) {\n\n\t\t\t\t\t\t\tconst l = hufLength( encodingTable[ pl.p[ j ] ] );\n\n\t\t\t\t\t\t\twhile ( lc < l && inOffset.value < inOffsetEnd ) {\n\n\t\t\t\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( lc >= l ) {\n\n\t\t\t\t\t\t\t\tif ( hufCode( encodingTable[ pl.p[ j ] ] ) == ( ( c >> ( lc - l ) ) & ( ( 1 << l ) - 1 ) ) ) {\n\n\t\t\t\t\t\t\t\t\tlc -= l;\n\n\t\t\t\t\t\t\t\t\tgetCode( pl.p[ j ], rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( j == pl.lit ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst i = ( 8 - ni ) & 7;\n\n\t\t\tc >>= i;\n\t\t\tlc -= i;\n\n\t\t\twhile ( lc > 0 ) {\n\n\t\t\t\tconst pl = decodingTable[ ( c << ( HUF_DECBITS - lc ) ) & HUF_DECMASK ];\n\n\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction hufUncompress( uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw ) {\n\n\t\t\tconst outOffset = { value: 0 };\n\t\t\tconst initialInOffset = inOffset.value;\n\n\t\t\tconst im = parseUint32( inDataView, inOffset );\n\t\t\tconst iM = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tconst nBits = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tif ( im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE ) {\n\n\t\t\t\tthrow new Error( 'Something wrong with HUF_ENCSIZE' );\n\n\t\t\t}\n\n\t\t\tconst freq = new Array( HUF_ENCSIZE );\n\t\t\tconst hdec = new Array( HUF_DECSIZE );\n\n\t\t\thufClearDecTable( hdec );\n\n\t\t\tconst ni = nCompressed - ( inOffset.value - initialInOffset );\n\n\t\t\thufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, freq );\n\n\t\t\tif ( nBits > 8 * ( nCompressed - ( inOffset.value - initialInOffset ) ) ) {\n\n\t\t\t\tthrow new Error( 'Something wrong with hufUncompress' );\n\n\t\t\t}\n\n\t\t\thufBuildDecTable( freq, im, iM, hdec );\n\n\t\t\thufDecode( freq, hdec, uInt8Array, inOffset, nBits, iM, nRaw, outBuffer, outOffset );\n\n\t\t}\n\n\t\tfunction applyLut( lut, data, nData ) {\n\n\t\t\tfor ( let i = 0; i < nData; ++ i ) {\n\n\t\t\t\tdata[ i ] = lut[ data[ i ] ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction predictor( source ) {\n\n\t\t\tfor ( let t = 1; t < source.length; t ++ ) {\n\n\t\t\t\tconst d = source[ t - 1 ] + source[ t ] - 128;\n\t\t\t\tsource[ t ] = d;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction interleaveScalar( source, out ) {\n\n\t\t\tlet t1 = 0;\n\t\t\tlet t2 = Math.floor( ( source.length + 1 ) / 2 );\n\t\t\tlet s = 0;\n\t\t\tconst stop = source.length - 1;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t1 ++ ];\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t2 ++ ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction decodeRunLength( source ) {\n\n\t\t\tlet size = source.byteLength;\n\t\t\tconst out = new Array();\n\t\t\tlet p = 0;\n\n\t\t\tconst reader = new DataView( source );\n\n\t\t\twhile ( size > 0 ) {\n\n\t\t\t\tconst l = reader.getInt8( p ++ );\n\n\t\t\t\tif ( l < 0 ) {\n\n\t\t\t\t\tconst count = - l;\n\t\t\t\t\tsize -= count + 1;\n\n\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\tout.push( reader.getUint8( p ++ ) );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst count = l;\n\t\t\t\t\tsize -= 2;\n\n\t\t\t\t\tconst value = reader.getUint8( p ++ );\n\n\t\t\t\t\tfor ( let i = 0; i < count + 1; i ++ ) {\n\n\t\t\t\t\t\tout.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn out;\n\n\t\t}\n\n\t\tfunction lossyDctDecode( cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer ) {\n\n\t\t\tlet dataView = new DataView( outBuffer.buffer );\n\n\t\t\tconst width = channelData[ cscSet.idx[ 0 ] ].width;\n\t\t\tconst height = channelData[ cscSet.idx[ 0 ] ].height;\n\n\t\t\tconst numComp = 3;\n\n\t\t\tconst numFullBlocksX = Math.floor( width / 8.0 );\n\t\t\tconst numBlocksX = Math.ceil( width / 8.0 );\n\t\t\tconst numBlocksY = Math.ceil( height / 8.0 );\n\t\t\tconst leftoverX = width - ( numBlocksX - 1 ) * 8;\n\t\t\tconst leftoverY = height - ( numBlocksY - 1 ) * 8;\n\n\t\t\tconst currAcComp = { value: 0 };\n\t\t\tconst currDcComp = new Array( numComp );\n\t\t\tconst dctData = new Array( numComp );\n\t\t\tconst halfZigBlock = new Array( numComp );\n\t\t\tconst rowBlock = new Array( numComp );\n\t\t\tconst rowOffsets = new Array( numComp );\n\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\trowOffsets[ comp ] = rowPtrs[ cscSet.idx[ comp ] ];\n\t\t\t\tcurrDcComp[ comp ] = ( comp < 1 ) ? 0 : currDcComp[ comp - 1 ] + numBlocksX * numBlocksY;\n\t\t\t\tdctData[ comp ] = new Float32Array( 64 );\n\t\t\t\thalfZigBlock[ comp ] = new Uint16Array( 64 );\n\t\t\t\trowBlock[ comp ] = new Uint16Array( numBlocksX * 64 );\n\n\t\t\t}\n\n\t\t\tfor ( let blocky = 0; blocky < numBlocksY; ++ blocky ) {\n\n\t\t\t\tlet maxY = 8;\n\n\t\t\t\tif ( blocky == numBlocksY - 1 )\n\t\t\t\t\tmaxY = leftoverY;\n\n\t\t\t\tlet maxX = 8;\n\n\t\t\t\tfor ( let blockx = 0; blockx < numBlocksX; ++ blockx ) {\n\n\t\t\t\t\tif ( blockx == numBlocksX - 1 )\n\t\t\t\t\t\tmaxX = leftoverX;\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\thalfZigBlock[ comp ].fill( 0 );\n\n\t\t\t\t\t\t// set block DC component\n\t\t\t\t\t\thalfZigBlock[ comp ][ 0 ] = dcBuffer[ currDcComp[ comp ] ++ ];\n\t\t\t\t\t\t// set block AC components\n\t\t\t\t\t\tunRleAC( currAcComp, acBuffer, halfZigBlock[ comp ] );\n\n\t\t\t\t\t\t// UnZigZag block to float\n\t\t\t\t\t\tunZigZag( halfZigBlock[ comp ], dctData[ comp ] );\n\t\t\t\t\t\t// decode float dct\n\t\t\t\t\t\tdctInverse( dctData[ comp ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( numComp == 3 ) {\n\n\t\t\t\t\t\tcsc709Inverse( dctData );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\tconvertToHalf( dctData[ comp ], rowBlock[ comp ], blockx * 64 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // blockx\n\n\t\t\t\tlet offset = 0;\n\n\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\toffset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\t\tfor ( let blockx = 0; blockx < numFullBlocksX; ++ blockx ) {\n\n\t\t\t\t\t\t\tconst src = blockx * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 0 * INT16_SIZE * type, rowBlock[ comp ][ src + 0 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 1 * INT16_SIZE * type, rowBlock[ comp ][ src + 1 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 2 * INT16_SIZE * type, rowBlock[ comp ][ src + 2 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 3 * INT16_SIZE * type, rowBlock[ comp ][ src + 3 ], true );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 4 * INT16_SIZE * type, rowBlock[ comp ][ src + 4 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 5 * INT16_SIZE * type, rowBlock[ comp ][ src + 5 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 6 * INT16_SIZE * type, rowBlock[ comp ][ src + 6 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 7 * INT16_SIZE * type, rowBlock[ comp ][ src + 7 ], true );\n\n\t\t\t\t\t\t\toffset += 8 * INT16_SIZE * type;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle partial X blocks\n\t\t\t\t\tif ( numFullBlocksX != numBlocksX ) {\n\n\t\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ] + 8 * numFullBlocksX * INT16_SIZE * type;\n\t\t\t\t\t\t\tconst src = numFullBlocksX * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < maxX; ++ x ) {\n\n\t\t\t\t\t\t\t\tdataView.setUint16( offset + x * INT16_SIZE * type, rowBlock[ comp ][ src + x ], true );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} // comp\n\n\t\t\t} // blocky\n\n\t\t\tconst halfRow = new Uint16Array( width );\n\t\t\tdataView = new DataView( outBuffer.buffer );\n\n\t\t\t// convert channels back to float, if needed\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\tchannelData[ cscSet.idx[ comp ] ].decoded = true;\n\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\tif ( channelData[ comp ].type != 2 ) continue;\n\n\t\t\t\tfor ( let y = 0; y < height; ++ y ) {\n\n\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\thalfRow[ x ] = dataView.getUint16( offset + x * INT16_SIZE * type, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset + x * INT16_SIZE * type, decodeFloat16( halfRow[ x ] ), true );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unRleAC( currAcComp, acBuffer, halfZigBlock ) {\n\n\t\t\tlet acValue;\n\t\t\tlet dctComp = 1;\n\n\t\t\twhile ( dctComp < 64 ) {\n\n\t\t\t\tacValue = acBuffer[ currAcComp.value ];\n\n\t\t\t\tif ( acValue == 0xff00 ) {\n\n\t\t\t\t\tdctComp = 64;\n\n\t\t\t\t} else if ( acValue >> 8 == 0xff ) {\n\n\t\t\t\t\tdctComp += acValue & 0xff;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thalfZigBlock[ dctComp ] = acValue;\n\t\t\t\t\tdctComp ++;\n\n\t\t\t\t}\n\n\t\t\t\tcurrAcComp.value ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unZigZag( src, dst ) {\n\n\t\t\tdst[ 0 ] = decodeFloat16( src[ 0 ] );\n\t\t\tdst[ 1 ] = decodeFloat16( src[ 1 ] );\n\t\t\tdst[ 2 ] = decodeFloat16( src[ 5 ] );\n\t\t\tdst[ 3 ] = decodeFloat16( src[ 6 ] );\n\t\t\tdst[ 4 ] = decodeFloat16( src[ 14 ] );\n\t\t\tdst[ 5 ] = decodeFloat16( src[ 15 ] );\n\t\t\tdst[ 6 ] = decodeFloat16( src[ 27 ] );\n\t\t\tdst[ 7 ] = decodeFloat16( src[ 28 ] );\n\t\t\tdst[ 8 ] = decodeFloat16( src[ 2 ] );\n\t\t\tdst[ 9 ] = decodeFloat16( src[ 4 ] );\n\n\t\t\tdst[ 10 ] = decodeFloat16( src[ 7 ] );\n\t\t\tdst[ 11 ] = decodeFloat16( src[ 13 ] );\n\t\t\tdst[ 12 ] = decodeFloat16( src[ 16 ] );\n\t\t\tdst[ 13 ] = decodeFloat16( src[ 26 ] );\n\t\t\tdst[ 14 ] = decodeFloat16( src[ 29 ] );\n\t\t\tdst[ 15 ] = decodeFloat16( src[ 42 ] );\n\t\t\tdst[ 16 ] = decodeFloat16( src[ 3 ] );\n\t\t\tdst[ 17 ] = decodeFloat16( src[ 8 ] );\n\t\t\tdst[ 18 ] = decodeFloat16( src[ 12 ] );\n\t\t\tdst[ 19 ] = decodeFloat16( src[ 17 ] );\n\n\t\t\tdst[ 20 ] = decodeFloat16( src[ 25 ] );\n\t\t\tdst[ 21 ] = decodeFloat16( src[ 30 ] );\n\t\t\tdst[ 22 ] = decodeFloat16( src[ 41 ] );\n\t\t\tdst[ 23 ] = decodeFloat16( src[ 43 ] );\n\t\t\tdst[ 24 ] = decodeFloat16( src[ 9 ] );\n\t\t\tdst[ 25 ] = decodeFloat16( src[ 11 ] );\n\t\t\tdst[ 26 ] = decodeFloat16( src[ 18 ] );\n\t\t\tdst[ 27 ] = decodeFloat16( src[ 24 ] );\n\t\t\tdst[ 28 ] = decodeFloat16( src[ 31 ] );\n\t\t\tdst[ 29 ] = decodeFloat16( src[ 40 ] );\n\n\t\t\tdst[ 30 ] = decodeFloat16( src[ 44 ] );\n\t\t\tdst[ 31 ] = decodeFloat16( src[ 53 ] );\n\t\t\tdst[ 32 ] = decodeFloat16( src[ 10 ] );\n\t\t\tdst[ 33 ] = decodeFloat16( src[ 19 ] );\n\t\t\tdst[ 34 ] = decodeFloat16( src[ 23 ] );\n\t\t\tdst[ 35 ] = decodeFloat16( src[ 32 ] );\n\t\t\tdst[ 36 ] = decodeFloat16( src[ 39 ] );\n\t\t\tdst[ 37 ] = decodeFloat16( src[ 45 ] );\n\t\t\tdst[ 38 ] = decodeFloat16( src[ 52 ] );\n\t\t\tdst[ 39 ] = decodeFloat16( src[ 54 ] );\n\n\t\t\tdst[ 40 ] = decodeFloat16( src[ 20 ] );\n\t\t\tdst[ 41 ] = decodeFloat16( src[ 22 ] );\n\t\t\tdst[ 42 ] = decodeFloat16( src[ 33 ] );\n\t\t\tdst[ 43 ] = decodeFloat16( src[ 38 ] );\n\t\t\tdst[ 44 ] = decodeFloat16( src[ 46 ] );\n\t\t\tdst[ 45 ] = decodeFloat16( src[ 51 ] );\n\t\t\tdst[ 46 ] = decodeFloat16( src[ 55 ] );\n\t\t\tdst[ 47 ] = decodeFloat16( src[ 60 ] );\n\t\t\tdst[ 48 ] = decodeFloat16( src[ 21 ] );\n\t\t\tdst[ 49 ] = decodeFloat16( src[ 34 ] );\n\n\t\t\tdst[ 50 ] = decodeFloat16( src[ 37 ] );\n\t\t\tdst[ 51 ] = decodeFloat16( src[ 47 ] );\n\t\t\tdst[ 52 ] = decodeFloat16( src[ 50 ] );\n\t\t\tdst[ 53 ] = decodeFloat16( src[ 56 ] );\n\t\t\tdst[ 54 ] = decodeFloat16( src[ 59 ] );\n\t\t\tdst[ 55 ] = decodeFloat16( src[ 61 ] );\n\t\t\tdst[ 56 ] = decodeFloat16( src[ 35 ] );\n\t\t\tdst[ 57 ] = decodeFloat16( src[ 36 ] );\n\t\t\tdst[ 58 ] = decodeFloat16( src[ 48 ] );\n\t\t\tdst[ 59 ] = decodeFloat16( src[ 49 ] );\n\n\t\t\tdst[ 60 ] = decodeFloat16( src[ 57 ] );\n\t\t\tdst[ 61 ] = decodeFloat16( src[ 58 ] );\n\t\t\tdst[ 62 ] = decodeFloat16( src[ 62 ] );\n\t\t\tdst[ 63 ] = decodeFloat16( src[ 63 ] );\n\n\t\t}\n\n\t\tfunction dctInverse( data ) {\n\n\t\t\tconst a = 0.5 * Math.cos( 3.14159 / 4.0 );\n\t\t\tconst b = 0.5 * Math.cos( 3.14159 / 16.0 );\n\t\t\tconst c = 0.5 * Math.cos( 3.14159 / 8.0 );\n\t\t\tconst d = 0.5 * Math.cos( 3.0 * 3.14159 / 16.0 );\n\t\t\tconst e = 0.5 * Math.cos( 5.0 * 3.14159 / 16.0 );\n\t\t\tconst f = 0.5 * Math.cos( 3.0 * 3.14159 / 8.0 );\n\t\t\tconst g = 0.5 * Math.cos( 7.0 * 3.14159 / 16.0 );\n\n\t\t\tconst alpha = new Array( 4 );\n\t\t\tconst beta = new Array( 4 );\n\t\t\tconst theta = new Array( 4 );\n\t\t\tconst gamma = new Array( 4 );\n\n\t\t\tfor ( let row = 0; row < 8; ++ row ) {\n\n\t\t\t\tconst rowPtr = row * 8;\n\n\t\t\t\talpha[ 0 ] = c * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 1 ] = f * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 2 ] = c * data[ rowPtr + 6 ];\n\t\t\t\talpha[ 3 ] = f * data[ rowPtr + 6 ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ rowPtr + 1 ] + d * data[ rowPtr + 3 ] + e * data[ rowPtr + 5 ] + g * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 1 ] = d * data[ rowPtr + 1 ] - g * data[ rowPtr + 3 ] - b * data[ rowPtr + 5 ] - e * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 2 ] = e * data[ rowPtr + 1 ] - b * data[ rowPtr + 3 ] + g * data[ rowPtr + 5 ] + d * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 3 ] = g * data[ rowPtr + 1 ] - e * data[ rowPtr + 3 ] + d * data[ rowPtr + 5 ] - b * data[ rowPtr + 7 ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ rowPtr + 0 ] + data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ rowPtr + 0 ] - data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ rowPtr + 0 ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ rowPtr + 1 ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 2 ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 3 ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ rowPtr + 4 ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ rowPtr + 5 ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 6 ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 7 ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t\tfor ( let column = 0; column < 8; ++ column ) {\n\n\t\t\t\talpha[ 0 ] = c * data[ 16 + column ];\n\t\t\t\talpha[ 1 ] = f * data[ 16 + column ];\n\t\t\t\talpha[ 2 ] = c * data[ 48 + column ];\n\t\t\t\talpha[ 3 ] = f * data[ 48 + column ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ 8 + column ] + d * data[ 24 + column ] + e * data[ 40 + column ] + g * data[ 56 + column ];\n\t\t\t\tbeta[ 1 ] = d * data[ 8 + column ] - g * data[ 24 + column ] - b * data[ 40 + column ] - e * data[ 56 + column ];\n\t\t\t\tbeta[ 2 ] = e * data[ 8 + column ] - b * data[ 24 + column ] + g * data[ 40 + column ] + d * data[ 56 + column ];\n\t\t\t\tbeta[ 3 ] = g * data[ 8 + column ] - e * data[ 24 + column ] + d * data[ 40 + column ] - b * data[ 56 + column ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ column ] + data[ 32 + column ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ column ] - data[ 32 + column ] );\n\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ 0 + column ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ 8 + column ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ 16 + column ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ 24 + column ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ 32 + column ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ 40 + column ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ 48 + column ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ 56 + column ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction csc709Inverse( data ) {\n\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\n\n\t\t\t\tconst y = data[ 0 ][ i ];\n\t\t\t\tconst cb = data[ 1 ][ i ];\n\t\t\t\tconst cr = data[ 2 ][ i ];\n\n\t\t\t\tdata[ 0 ][ i ] = y + 1.5747 * cr;\n\t\t\t\tdata[ 1 ][ i ] = y - 0.1873 * cb - 0.4682 * cr;\n\t\t\t\tdata[ 2 ][ i ] = y + 1.8556 * cb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convertToHalf( src, dst, idx ) {\n\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\n\n\t\t\t\tdst[ idx + i ] = DataUtils.toHalfFloat( toLinear( src[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction toLinear( float ) {\n\n\t\t\tif ( float <= 1 ) {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( Math.abs( float ), 2.2 );\n\n\t\t\t} else {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( logBase, Math.abs( float ) - 1.0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uncompressRAW( info ) {\n\n\t\t\treturn new DataView( info.array.buffer, info.offset.value, info.size );\n\n\t\t}\n\n\t\tfunction uncompressRLE( info ) {\n\n\t\t\tconst compressed = info.viewer.buffer.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tconst rawBuffer = new Uint8Array( decodeRunLength( compressed ) );\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressZIP( info ) {\n\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed );\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPIZ( info ) {\n\n\t\t\tconst inDataView = info.viewer;\n\t\t\tconst inOffset = { value: info.offset.value };\n\n\t\t\tconst outBuffer = new Uint16Array( info.columns * info.lines * ( info.inputChannels.length * info.type ) );\n\t\t\tconst bitmap = new Uint8Array( BITMAP_SIZE );\n\n\t\t\t// Setup channel info\n\t\t\tlet outBufferEnd = 0;\n\t\t\tconst pizChannelData = new Array( info.inputChannels.length );\n\t\t\tfor ( let i = 0, il = info.inputChannels.length; i < il; i ++ ) {\n\n\t\t\t\tpizChannelData[ i ] = {};\n\t\t\t\tpizChannelData[ i ][ 'start' ] = outBufferEnd;\n\t\t\t\tpizChannelData[ i ][ 'end' ] = pizChannelData[ i ][ 'start' ];\n\t\t\t\tpizChannelData[ i ][ 'nx' ] = info.columns;\n\t\t\t\tpizChannelData[ i ][ 'ny' ] = info.lines;\n\t\t\t\tpizChannelData[ i ][ 'size' ] = info.type;\n\n\t\t\t\toutBufferEnd += pizChannelData[ i ].nx * pizChannelData[ i ].ny * pizChannelData[ i ].size;\n\n\t\t\t}\n\n\t\t\t// Read range compression data\n\n\t\t\tconst minNonZero = parseUint16( inDataView, inOffset );\n\t\t\tconst maxNonZero = parseUint16( inDataView, inOffset );\n\n\t\t\tif ( maxNonZero >= BITMAP_SIZE ) {\n\n\t\t\t\tthrow new Error( 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE' );\n\n\t\t\t}\n\n\t\t\tif ( minNonZero <= maxNonZero ) {\n\n\t\t\t\tfor ( let i = 0; i < maxNonZero - minNonZero + 1; i ++ ) {\n\n\t\t\t\t\tbitmap[ i + minNonZero ] = parseUint8( inDataView, inOffset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Reverse LUT\n\t\t\tconst lut = new Uint16Array( USHORT_RANGE );\n\t\t\tconst maxValue = reverseLutFromBitmap( bitmap, lut );\n\n\t\t\tconst length = parseUint32( inDataView, inOffset );\n\n\t\t\t// Huffman decoding\n\t\t\thufUncompress( info.array, inDataView, inOffset, length, outBuffer, outBufferEnd );\n\n\t\t\t// Wavelet decoding\n\t\t\tfor ( let i = 0; i < info.inputChannels.length; ++ i ) {\n\n\t\t\t\tconst cd = pizChannelData[ i ];\n\n\t\t\t\tfor ( let j = 0; j < pizChannelData[ i ].size; ++ j ) {\n\n\t\t\t\t\twav2Decode(\n\t\t\t\t\t\toutBuffer,\n\t\t\t\t\t\tcd.start + j,\n\t\t\t\t\t\tcd.nx,\n\t\t\t\t\t\tcd.size,\n\t\t\t\t\t\tcd.ny,\n\t\t\t\t\t\tcd.nx * cd.size,\n\t\t\t\t\t\tmaxValue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Expand the pixel data to their original range\n\t\t\tapplyLut( lut, outBuffer, outBufferEnd );\n\n\t\t\t// Rearrange the pixel data into the format expected by the caller.\n\t\t\tlet tmpOffset = 0;\n\t\t\tconst tmpBuffer = new Uint8Array( outBuffer.buffer.byteLength );\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.inputChannels.length; c ++ ) {\n\n\t\t\t\t\tconst cd = pizChannelData[ c ];\n\n\t\t\t\t\tconst n = cd.nx * cd.size;\n\t\t\t\t\tconst cp = new Uint8Array( outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE );\n\n\t\t\t\t\ttmpBuffer.set( cp, tmpOffset );\n\t\t\t\t\ttmpOffset += n * INT16_SIZE;\n\t\t\t\t\tcd.end += n;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPXR( info ) {\n\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed );\n\n\t\t\tconst byteSize = info.inputChannels.length * info.lines * info.columns * info.totalBytes;\n\t\t\tconst tmpBuffer = new ArrayBuffer( byteSize );\n\t\t\tconst viewer = new DataView( tmpBuffer );\n\n\t\t\tlet tmpBufferEnd = 0;\n\t\t\tlet writePtr = 0;\n\t\t\tconst ptr = new Array( 4 );\n\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.inputChannels.length; c ++ ) {\n\n\t\t\t\t\tlet pixel = 0;\n\n\t\t\t\t\tconst type = info.inputChannels[ c ].pixelType;\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 1:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.columns;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 1 ] + info.columns;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.columns; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 8 ) | rawBuffer[ ptr[ 1 ] ++ ];\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\tviewer.setUint16( writePtr, pixel, true );\n\t\t\t\t\t\t\t\twritePtr += 2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.columns;\n\t\t\t\t\t\t\tptr[ 2 ] = ptr[ 1 ] + info.columns;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 2 ] + info.columns;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.columns; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 24 ) | ( rawBuffer[ ptr[ 1 ] ++ ] << 16 ) | ( rawBuffer[ ptr[ 2 ] ++ ] << 8 );\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\tviewer.setUint32( writePtr, pixel, true );\n\t\t\t\t\t\t\t\twritePtr += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn viewer;\n\n\t\t}\n\n\t\tfunction uncompressDWA( info ) {\n\n\t\t\tconst inDataView = info.viewer;\n\t\t\tconst inOffset = { value: info.offset.value };\n\t\t\tconst outBuffer = new Uint8Array( info.columns * info.lines * ( info.inputChannels.length * info.type * INT16_SIZE ) );\n\n\t\t\t// Read compression header information\n\t\t\tconst dwaHeader = {\n\n\t\t\t\tversion: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tdcCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleRawSize: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalAcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalDcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompression: parseInt64( inDataView, inOffset )\n\n\t\t\t};\n\n\t\t\tif ( dwaHeader.version < 2 )\n\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported' );\n\n\t\t\t// Read channel ruleset information\n\t\t\tconst channelRules = new Array();\n\t\t\tlet ruleSize = parseUint16( inDataView, inOffset ) - INT16_SIZE;\n\n\t\t\twhile ( ruleSize > 0 ) {\n\n\t\t\t\tconst name = parseNullTerminatedString( inDataView.buffer, inOffset );\n\t\t\t\tconst value = parseUint8( inDataView, inOffset );\n\t\t\t\tconst compression = ( value >> 2 ) & 3;\n\t\t\t\tconst csc = ( value >> 4 ) - 1;\n\t\t\t\tconst index = new Int8Array( [ csc ] )[ 0 ];\n\t\t\t\tconst type = parseUint8( inDataView, inOffset );\n\n\t\t\t\tchannelRules.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tindex: index,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tcompression: compression,\n\t\t\t\t} );\n\n\t\t\t\truleSize -= name.length + 3;\n\n\t\t\t}\n\n\t\t\t// Classify channels\n\t\t\tconst channels = EXRHeader.channels;\n\t\t\tconst channelData = new Array( info.inputChannels.length );\n\n\t\t\tfor ( let i = 0; i < info.inputChannels.length; ++ i ) {\n\n\t\t\t\tconst cd = channelData[ i ] = {};\n\t\t\t\tconst channel = channels[ i ];\n\n\t\t\t\tcd.name = channel.name;\n\t\t\t\tcd.compression = UNKNOWN;\n\t\t\t\tcd.decoded = false;\n\t\t\t\tcd.type = channel.pixelType;\n\t\t\t\tcd.pLinear = channel.pLinear;\n\t\t\t\tcd.width = info.columns;\n\t\t\t\tcd.height = info.lines;\n\n\t\t\t}\n\n\t\t\tconst cscSet = {\n\t\t\t\tidx: new Array( 3 )\n\t\t\t};\n\n\t\t\tfor ( let offset = 0; offset < info.inputChannels.length; ++ offset ) {\n\n\t\t\t\tconst cd = channelData[ offset ];\n\n\t\t\t\tfor ( let i = 0; i < channelRules.length; ++ i ) {\n\n\t\t\t\t\tconst rule = channelRules[ i ];\n\n\t\t\t\t\tif ( cd.name == rule.name ) {\n\n\t\t\t\t\t\tcd.compression = rule.compression;\n\n\t\t\t\t\t\tif ( rule.index >= 0 ) {\n\n\t\t\t\t\t\t\tcscSet.idx[ rule.index ] = offset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcd.offset = offset;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet acBuffer, dcBuffer, rleBuffer;\n\n\t\t\t// Read DCT - AC component data\n\t\t\tif ( dwaHeader.acCompressedSize > 0 ) {\n\n\t\t\t\tswitch ( dwaHeader.acCompression ) {\n\n\t\t\t\t\tcase STATIC_HUFFMAN:\n\n\t\t\t\t\t\tacBuffer = new Uint16Array( dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\thufUncompress( info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DEFLATE:\n\n\t\t\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tconst data = fflate.unzlibSync( compressed );\n\t\t\t\t\t\tacBuffer = new Uint16Array( data.buffer );\n\t\t\t\t\t\tinOffset.value += dwaHeader.totalAcUncompressedCount;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\t// Read DCT - DC component data\n\t\t\tif ( dwaHeader.dcCompressedSize > 0 ) {\n\n\t\t\t\tconst zlibInfo = {\n\t\t\t\t\tarray: info.array,\n\t\t\t\t\toffset: inOffset,\n\t\t\t\t\tsize: dwaHeader.dcCompressedSize\n\t\t\t\t};\n\t\t\t\tdcBuffer = new Uint16Array( uncompressZIP( zlibInfo ).buffer );\n\t\t\t\tinOffset.value += dwaHeader.dcCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Read RLE compressed data\n\t\t\tif ( dwaHeader.rleRawSize > 0 ) {\n\n\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.rleCompressedSize );\n\t\t\t\tconst data = fflate.unzlibSync( compressed );\n\t\t\t\trleBuffer = decodeRunLength( data.buffer );\n\n\t\t\t\tinOffset.value += dwaHeader.rleCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Prepare outbuffer data offset\n\t\t\tlet outBufferEnd = 0;\n\t\t\tconst rowOffsets = new Array( channelData.length );\n\t\t\tfor ( let i = 0; i < rowOffsets.length; ++ i ) {\n\n\t\t\t\trowOffsets[ i ] = new Array();\n\n\t\t\t}\n\n\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\tfor ( let chan = 0; chan < channelData.length; ++ chan ) {\n\n\t\t\t\t\trowOffsets[ chan ].push( outBufferEnd );\n\t\t\t\t\toutBufferEnd += channelData[ chan ].width * info.type * INT16_SIZE;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Lossy DCT decode RGB channels\n\t\t\tlossyDctDecode( cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer );\n\n\t\t\t// Decode other channels\n\t\t\tfor ( let i = 0; i < channelData.length; ++ i ) {\n\n\t\t\t\tconst cd = channelData[ i ];\n\n\t\t\t\tif ( cd.decoded ) continue;\n\n\t\t\t\tswitch ( cd.compression ) {\n\n\t\t\t\t\tcase RLE:\n\n\t\t\t\t\t\tlet row = 0;\n\t\t\t\t\t\tlet rleOffset = 0;\n\n\t\t\t\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\t\t\t\tlet rowOffsetBytes = rowOffsets[ i ][ row ];\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < cd.width; ++ x ) {\n\n\t\t\t\t\t\t\t\tfor ( let byte = 0; byte < INT16_SIZE * cd.type; ++ byte ) {\n\n\t\t\t\t\t\t\t\t\toutBuffer[ rowOffsetBytes ++ ] = rleBuffer[ rleOffset + byte * cd.width * cd.height ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trleOffset ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trow ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase LOSSY_DCT: // skip\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported channel compression' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( outBuffer.buffer );\n\n\t\t}\n\n\t\tfunction parseNullTerminatedString( buffer, offset ) {\n\n\t\t\tconst uintBuffer = new Uint8Array( buffer );\n\t\t\tlet endOffset = 0;\n\n\t\t\twhile ( uintBuffer[ offset.value + endOffset ] != 0 ) {\n\n\t\t\t\tendOffset += 1;\n\n\t\t\t}\n\n\t\t\tconst stringValue = new TextDecoder().decode(\n\t\t\t\tuintBuffer.slice( offset.value, offset.value + endOffset )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + endOffset + 1;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseFixedLengthString( buffer, offset, size ) {\n\n\t\t\tconst stringValue = new TextDecoder().decode(\n\t\t\t\tnew Uint8Array( buffer ).slice( offset.value, offset.value + size )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + size;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseRational( dataView, offset ) {\n\n\t\t\tconst x = parseInt32( dataView, offset );\n\t\t\tconst y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseTimecode( dataView, offset ) {\n\n\t\t\tconst x = parseUint32( dataView, offset );\n\t\t\tconst y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseInt32( dataView, offset ) {\n\n\t\t\tconst Int32 = dataView.getInt32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Int32;\n\n\t\t}\n\n\t\tfunction parseUint32( dataView, offset ) {\n\n\t\t\tconst Uint32 = dataView.getUint32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Uint32;\n\n\t\t}\n\n\t\tfunction parseUint8Array( uInt8Array, offset ) {\n\n\t\t\tconst Uint8 = uInt8Array[ offset.value ];\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseUint8( dataView, offset ) {\n\n\t\t\tconst Uint8 = dataView.getUint8( offset.value );\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tconst parseInt64 = function ( dataView, offset ) {\n\n\t\t\tlet int;\n\n\t\t\tif ( 'getBigInt64' in DataView.prototype ) {\n\n\t\t\t\tint = Number( dataView.getBigInt64( offset.value, true ) );\n\n\t\t\t} else {\n\n\t\t\t\tint = dataView.getUint32( offset.value + 4, true ) + Number( dataView.getUint32( offset.value, true ) << 32 );\n\n\t\t\t}\n\n\t\t\toffset.value += ULONG_SIZE;\n\n\t\t\treturn int;\n\n\t\t};\n\n\t\tfunction parseFloat32( dataView, offset ) {\n\n\t\t\tconst float = dataView.getFloat32( offset.value, true );\n\n\t\t\toffset.value += FLOAT32_SIZE;\n\n\t\t\treturn float;\n\n\t\t}\n\n\t\tfunction decodeFloat32( dataView, offset ) {\n\n\t\t\treturn DataUtils.toHalfFloat( parseFloat32( dataView, offset ) );\n\n\t\t}\n\n\t\t// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\t\tfunction decodeFloat16( binary ) {\n\n\t\t\tconst exponent = ( binary & 0x7C00 ) >> 10,\n\t\t\t\tfraction = binary & 0x03FF;\n\n\t\t\treturn ( binary >> 15 ? - 1 : 1 ) * (\n\t\t\t\texponent ?\n\t\t\t\t\t(\n\t\t\t\t\t\texponent === 0x1F ?\n\t\t\t\t\t\t\tfraction ? NaN : Infinity :\n\t\t\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\n\t\t\t\t\t) :\n\t\t\t\t\t6.103515625e-5 * ( fraction / 0x400 )\n\t\t\t);\n\n\t\t}\n\n\t\tfunction parseUint16( dataView, offset ) {\n\n\t\t\tconst Uint16 = dataView.getUint16( offset.value, true );\n\n\t\t\toffset.value += INT16_SIZE;\n\n\t\t\treturn Uint16;\n\n\t\t}\n\n\t\tfunction parseFloat16( buffer, offset ) {\n\n\t\t\treturn decodeFloat16( parseUint16( buffer, offset ) );\n\n\t\t}\n\n\t\tfunction parseChlist( dataView, buffer, offset, size ) {\n\n\t\t\tconst startOffset = offset.value;\n\t\t\tconst channels = [];\n\n\t\t\twhile ( offset.value < ( startOffset + size - 1 ) ) {\n\n\t\t\t\tconst name = parseNullTerminatedString( buffer, offset );\n\t\t\t\tconst pixelType = parseInt32( dataView, offset );\n\t\t\t\tconst pLinear = parseUint8( dataView, offset );\n\t\t\t\toffset.value += 3; // reserved, three chars\n\t\t\t\tconst xSampling = parseInt32( dataView, offset );\n\t\t\t\tconst ySampling = parseInt32( dataView, offset );\n\n\t\t\t\tchannels.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tpixelType: pixelType,\n\t\t\t\t\tpLinear: pLinear,\n\t\t\t\t\txSampling: xSampling,\n\t\t\t\t\tySampling: ySampling\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toffset.value += 1;\n\n\t\t\treturn channels;\n\n\t\t}\n\n\t\tfunction parseChromaticities( dataView, offset ) {\n\n\t\t\tconst redX = parseFloat32( dataView, offset );\n\t\t\tconst redY = parseFloat32( dataView, offset );\n\t\t\tconst greenX = parseFloat32( dataView, offset );\n\t\t\tconst greenY = parseFloat32( dataView, offset );\n\t\t\tconst blueX = parseFloat32( dataView, offset );\n\t\t\tconst blueY = parseFloat32( dataView, offset );\n\t\t\tconst whiteX = parseFloat32( dataView, offset );\n\t\t\tconst whiteY = parseFloat32( dataView, offset );\n\n\t\t\treturn { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n\n\t\t}\n\n\t\tfunction parseCompression( dataView, offset ) {\n\n\t\t\tconst compressionCodes = [\n\t\t\t\t'NO_COMPRESSION',\n\t\t\t\t'RLE_COMPRESSION',\n\t\t\t\t'ZIPS_COMPRESSION',\n\t\t\t\t'ZIP_COMPRESSION',\n\t\t\t\t'PIZ_COMPRESSION',\n\t\t\t\t'PXR24_COMPRESSION',\n\t\t\t\t'B44_COMPRESSION',\n\t\t\t\t'B44A_COMPRESSION',\n\t\t\t\t'DWAA_COMPRESSION',\n\t\t\t\t'DWAB_COMPRESSION'\n\t\t\t];\n\n\t\t\tconst compression = parseUint8( dataView, offset );\n\n\t\t\treturn compressionCodes[ compression ];\n\n\t\t}\n\n\t\tfunction parseBox2i( dataView, offset ) {\n\n\t\t\tconst xMin = parseInt32( dataView, offset );\n\t\t\tconst yMin = parseInt32( dataView, offset );\n\t\t\tconst xMax = parseInt32( dataView, offset );\n\t\t\tconst yMax = parseInt32( dataView, offset );\n\n\t\t\treturn { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n\n\t\t}\n\n\t\tfunction parseLineOrder( dataView, offset ) {\n\n\t\t\tconst lineOrders = [\n\t\t\t\t'INCREASING_Y',\n\t\t\t\t'DECREASING_Y',\n\t\t\t\t'RANDOM_Y',\n\t\t\t];\n\n\t\t\tconst lineOrder = parseUint8( dataView, offset );\n\n\t\t\treturn lineOrders[ lineOrder ];\n\n\t\t}\n\n\t\tfunction parseEnvmap( dataView, offset ) {\n\n\t\t\tconst envmaps = [\n\t\t\t\t'ENVMAP_LATLONG',\n\t\t\t\t'ENVMAP_CUBE'\n\t\t\t];\n\n\t\t\tconst envmap = parseUint8( dataView, offset );\n\n\t\t\treturn envmaps[ envmap ];\n\n\t\t}\n\n\t\tfunction parseTiledesc( dataView, offset ) {\n\n\t\t\tconst levelModes = [\n\t\t\t\t'ONE_LEVEL',\n\t\t\t\t'MIPMAP_LEVELS',\n\t\t\t\t'RIPMAP_LEVELS',\n\t\t\t];\n\n\t\t\tconst roundingModes = [\n\t\t\t\t'ROUND_DOWN',\n\t\t\t\t'ROUND_UP',\n\t\t\t];\n\n\t\t\tconst xSize = parseUint32( dataView, offset );\n\t\t\tconst ySize = parseUint32( dataView, offset );\n\t\t\tconst modes = parseUint8( dataView, offset );\n\n\t\t\treturn {\n\t\t\t\txSize: xSize,\n\t\t\t\tySize: ySize,\n\t\t\t\tlevelMode: levelModes[ modes & 0xf ],\n\t\t\t\troundingMode: roundingModes[ modes >> 4 ]\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseV2f( dataView, offset ) {\n\n\t\t\tconst x = parseFloat32( dataView, offset );\n\t\t\tconst y = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseV3f( dataView, offset ) {\n\n\t\t\tconst x = parseFloat32( dataView, offset );\n\t\t\tconst y = parseFloat32( dataView, offset );\n\t\t\tconst z = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y, z ];\n\n\t\t}\n\n\t\tfunction parseValue( dataView, buffer, offset, type, size ) {\n\n\t\t\tif ( type === 'string' || type === 'stringvector' || type === 'iccProfile' ) {\n\n\t\t\t\treturn parseFixedLengthString( buffer, offset, size );\n\n\t\t\t} else if ( type === 'chlist' ) {\n\n\t\t\t\treturn parseChlist( dataView, buffer, offset, size );\n\n\t\t\t} else if ( type === 'chromaticities' ) {\n\n\t\t\t\treturn parseChromaticities( dataView, offset );\n\n\t\t\t} else if ( type === 'compression' ) {\n\n\t\t\t\treturn parseCompression( dataView, offset );\n\n\t\t\t} else if ( type === 'box2i' ) {\n\n\t\t\t\treturn parseBox2i( dataView, offset );\n\n\t\t\t} else if ( type === 'envmap' ) {\n\n\t\t\t\treturn parseEnvmap( dataView, offset );\n\n\t\t\t} else if ( type === 'tiledesc' ) {\n\n\t\t\t\treturn parseTiledesc( dataView, offset );\n\n\t\t\t} else if ( type === 'lineOrder' ) {\n\n\t\t\t\treturn parseLineOrder( dataView, offset );\n\n\t\t\t} else if ( type === 'float' ) {\n\n\t\t\t\treturn parseFloat32( dataView, offset );\n\n\t\t\t} else if ( type === 'v2f' ) {\n\n\t\t\t\treturn parseV2f( dataView, offset );\n\n\t\t\t} else if ( type === 'v3f' ) {\n\n\t\t\t\treturn parseV3f( dataView, offset );\n\n\t\t\t} else if ( type === 'int' ) {\n\n\t\t\t\treturn parseInt32( dataView, offset );\n\n\t\t\t} else if ( type === 'rational' ) {\n\n\t\t\t\treturn parseRational( dataView, offset );\n\n\t\t\t} else if ( type === 'timecode' ) {\n\n\t\t\t\treturn parseTimecode( dataView, offset );\n\n\t\t\t} else if ( type === 'preview' ) {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn 'skipped';\n\n\t\t\t} else {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction roundLog2( x, mode ) {\n\n\t\t\tconst log2 = Math.log2( x );\n\t\t\treturn mode == 'ROUND_DOWN' ? Math.floor( log2 ) : Math.ceil( log2 );\n\n\t\t}\n\n\t\tfunction calculateTileLevels( tiledesc, w, h ) {\n\n\t\t\tlet num = 0;\n\n\t\t\tswitch ( tiledesc.levelMode ) {\n\n\t\t\t\tcase 'ONE_LEVEL':\n\t\t\t\t\tnum = 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'MIPMAP_LEVELS':\n\t\t\t\t\tnum = roundLog2( Math.max( w, h ), tiledesc.roundingMode ) + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RIPMAP_LEVELS':\n\t\t\t\t\tthrow new Error( 'THREE.EXRLoader: RIPMAP_LEVELS tiles currently unsupported.' );\n\n\t\t\t}\n\n\t\t\treturn num;\n\n\t\t}\n\n\t\tfunction calculateTiles( count, dataSize, size, roundingMode ) {\n\n\t\t\tconst tiles = new Array( count );\n\n\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\tconst b = ( 1 << i );\n\t\t\t\tlet s = ( dataSize / b ) | 0;\n\n\t\t\t\tif ( roundingMode == 'ROUND_UP' && s * b < dataSize ) s += 1;\n\n\t\t\t\tconst l = Math.max( s, 1 );\n\n\t\t\t\ttiles[ i ] = ( ( l + size - 1 ) / size ) | 0;\n\n\t\t\t}\n\n\t\t\treturn tiles;\n\n\t\t}\n\n\t\tfunction parseTiles() {\n\n\t\t\tconst EXRDecoder = this;\n\t\t\tconst offset = EXRDecoder.offset;\n\t\t\tconst tmpOffset = { value: 0 };\n\n\t\t\tfor ( let tile = 0; tile < EXRDecoder.tileCount; tile ++ ) {\n\n\t\t\t\tconst tileX = parseInt32( EXRDecoder.viewer, offset );\n\t\t\t\tconst tileY = parseInt32( EXRDecoder.viewer, offset );\n\t\t\t\toffset.value += 8; // skip levels - only parsing top-level\n\t\t\t\tEXRDecoder.size = parseUint32( EXRDecoder.viewer, offset );\n\n\t\t\t\tconst startX = tileX * EXRDecoder.blockWidth;\n\t\t\t\tconst startY = tileY * EXRDecoder.blockHeight;\n\t\t\t\tEXRDecoder.columns = ( startX + EXRDecoder.blockWidth > EXRDecoder.width ) ? EXRDecoder.width - startX : EXRDecoder.blockWidth;\n\t\t\t\tEXRDecoder.lines = ( startY + EXRDecoder.blockHeight > EXRDecoder.height ) ? EXRDecoder.height - startY : EXRDecoder.blockHeight;\n\n\t\t\t\tconst bytesBlockLine = EXRDecoder.columns * EXRDecoder.totalBytes;\n\t\t\t\tconst isCompressed = EXRDecoder.size < EXRDecoder.lines * bytesBlockLine;\n\t\t\t\tconst viewer = isCompressed ? EXRDecoder.uncompress( EXRDecoder ) : uncompressRAW( EXRDecoder );\n\n\t\t\t\toffset.value += EXRDecoder.size;\n\n\t\t\t\tfor ( let line = 0; line < EXRDecoder.lines; line ++ ) {\n\n\t\t\t\t\tconst lineOffset = line * EXRDecoder.columns * EXRDecoder.totalBytes;\n\n\t\t\t\t\tfor ( let channelID = 0; channelID < EXRDecoder.inputChannels.length; channelID ++ ) {\n\n\t\t\t\t\t\tconst name = EXRHeader.channels[ channelID ].name;\n\t\t\t\t\t\tconst lOff = EXRDecoder.channelByteOffsets[ name ] * EXRDecoder.columns;\n\t\t\t\t\t\tconst cOff = EXRDecoder.decodeChannels[ name ];\n\n\t\t\t\t\t\tif ( cOff === undefined ) continue;\n\n\t\t\t\t\t\ttmpOffset.value = lineOffset + lOff;\n\t\t\t\t\t\tconst outLineOffset = ( EXRDecoder.height - ( 1 + startY + line ) ) * EXRDecoder.outLineWidth;\n\n\t\t\t\t\t\tfor ( let x = 0; x < EXRDecoder.columns; x ++ ) {\n\n\t\t\t\t\t\t\tconst outIndex = outLineOffset + ( x + startX ) * EXRDecoder.outputChannels + cOff;\n\t\t\t\t\t\t\tEXRDecoder.byteArray[ outIndex ] = EXRDecoder.getter( viewer, tmpOffset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseScanline() {\n\n\t\t\tconst EXRDecoder = this;\n\t\t\tconst offset = EXRDecoder.offset;\n\t\t\tconst tmpOffset = { value: 0 };\n\n\t\t\tfor ( let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.blockHeight; scanlineBlockIdx ++ ) {\n\n\t\t\t\tconst line = parseInt32( EXRDecoder.viewer, offset ) - EXRHeader.dataWindow.yMin; // line_no\n\t\t\t\tEXRDecoder.size = parseUint32( EXRDecoder.viewer, offset ); // data_len\n\t\t\t\tEXRDecoder.lines = ( ( line + EXRDecoder.blockHeight > EXRDecoder.height ) ? ( EXRDecoder.height - line ) : EXRDecoder.blockHeight );\n\n\t\t\t\tconst bytesPerLine = EXRDecoder.columns * EXRDecoder.totalBytes;\n\t\t\t\tconst isCompressed = EXRDecoder.size < EXRDecoder.lines * bytesPerLine;\n\t\t\t\tconst viewer = isCompressed ? EXRDecoder.uncompress( EXRDecoder ) : uncompressRAW( EXRDecoder );\n\n\t\t\t\toffset.value += EXRDecoder.size;\n\n\t\t\t\tfor ( let line_y = 0; line_y < EXRDecoder.blockHeight; line_y ++ ) {\n\n\t\t\t\t\tconst scan_y = scanlineBlockIdx * EXRDecoder.blockHeight;\n\t\t\t\t\tconst true_y = line_y + EXRDecoder.scanOrder( scan_y );\n\t\t\t\t\tif ( true_y >= EXRDecoder.height ) continue;\n\n\t\t\t\t\tconst lineOffset = line_y * bytesPerLine;\n\t\t\t\t\tconst outLineOffset = ( EXRDecoder.height - 1 - true_y ) * EXRDecoder.outLineWidth;\n\n\t\t\t\t\tfor ( let channelID = 0; channelID < EXRDecoder.inputChannels.length; channelID ++ ) {\n\n\t\t\t\t\t\tconst name = EXRHeader.channels[ channelID ].name;\n\t\t\t\t\t\tconst lOff = EXRDecoder.channelByteOffsets[ name ] * EXRDecoder.columns;\n\t\t\t\t\t\tconst cOff = EXRDecoder.decodeChannels[ name ];\n\n\t\t\t\t\t\tif ( cOff === undefined ) continue;\n\n\t\t\t\t\t\ttmpOffset.value = lineOffset + lOff;\n\n\t\t\t\t\t\tfor ( let x = 0; x < EXRDecoder.columns; x ++ ) {\n\n\t\t\t\t\t\t\tconst outIndex = outLineOffset + x * EXRDecoder.outputChannels + cOff;\n\t\t\t\t\t\t\tEXRDecoder.byteArray[ outIndex ] = EXRDecoder.getter( viewer, tmpOffset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseHeader( dataView, buffer, offset ) {\n\n\t\t\tconst EXRHeader = {};\n\n\t\t\tif ( dataView.getUint32( 0, true ) != 20000630 ) { // magic\n\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: Provided file doesn\\'t appear to be in OpenEXR format.' );\n\n\t\t\t}\n\n\t\t\tEXRHeader.version = dataView.getUint8( 4 );\n\n\t\t\tconst spec = dataView.getUint8( 5 ); // fullMask\n\n\t\t\tEXRHeader.spec = {\n\t\t\t\tsingleTile: !! ( spec & 2 ),\n\t\t\t\tlongName: !! ( spec & 4 ),\n\t\t\t\tdeepFormat: !! ( spec & 8 ),\n\t\t\t\tmultiPart: !! ( spec & 16 ),\n\t\t\t};\n\n\t\t\t// start of header\n\n\t\t\toffset.value = 8; // start at 8 - after pre-amble\n\n\t\t\tlet keepReading = true;\n\n\t\t\twhile ( keepReading ) {\n\n\t\t\t\tconst attributeName = parseNullTerminatedString( buffer, offset );\n\n\t\t\t\tif ( attributeName === '' ) {\n\n\t\t\t\t\tkeepReading = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst attributeType = parseNullTerminatedString( buffer, offset );\n\t\t\t\t\tconst attributeSize = parseUint32( dataView, offset );\n\t\t\t\t\tconst attributeValue = parseValue( dataView, buffer, offset, attributeType, attributeSize );\n\n\t\t\t\t\tif ( attributeValue === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( `THREE.EXRLoader: Skipped unknown header attribute type \\'${attributeType}\\'.` );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tEXRHeader[ attributeName ] = attributeValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( spec & ~ 0x06 ) != 0 ) { // unsupported deep-image, multi-part\n\n\t\t\t\tconsole.error( 'THREE.EXRHeader:', EXRHeader );\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: Provided file is currently unsupported.' );\n\n\t\t\t}\n\n\t\t\treturn EXRHeader;\n\n\t\t}\n\n\t\tfunction setupDecoder( EXRHeader, dataView, uInt8Array, offset, outputType ) {\n\n\t\t\tconst EXRDecoder = {\n\t\t\t\tsize: 0,\n\t\t\t\tviewer: dataView,\n\t\t\t\tarray: uInt8Array,\n\t\t\t\toffset: offset,\n\t\t\t\twidth: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n\t\t\t\theight: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n\t\t\t\tinputChannels: EXRHeader.channels,\n\t\t\t\tchannelByteOffsets: {},\n\t\t\t\tscanOrder: null,\n\t\t\t\ttotalBytes: null,\n\t\t\t\tcolumns: null,\n\t\t\t\tlines: null,\n\t\t\t\ttype: null,\n\t\t\t\tuncompress: null,\n\t\t\t\tgetter: null,\n\t\t\t\tformat: null,\n\t\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\t};\n\n\t\t\tswitch ( EXRHeader.compression ) {\n\n\t\t\t\tcase 'NO_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRAW;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RLE_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRLE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZIPS_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZIP_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 16;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PIZ_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 32;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPIZ;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PXR24_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 16;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPXR;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DWAA_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 32;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DWAB_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 256;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported' );\n\n\t\t\t}\n\n\t\t\tconst channels = {};\n\t\t\tfor ( const channel of EXRHeader.channels ) {\n\n\t\t\t\tswitch ( channel.name ) {\n\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\tcase 'R':\n\t\t\t\t\tcase 'G':\n\t\t\t\t\tcase 'B':\n\t\t\t\t\tcase 'A':\n\t\t\t\t\t\tchannels[ channel.name ] = true;\n\t\t\t\t\t\tEXRDecoder.type = channel.pixelType;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\t\t\tlet fillAlpha = false;\n\n\t\t\tif ( channels.R && channels.G && channels.B ) {\n\n\t\t\t\tfillAlpha = ! channels.A;\n\t\t\t\tEXRDecoder.outputChannels = 4;\n\t\t\t\tEXRDecoder.decodeChannels = { R: 0, G: 1, B: 2, A: 3 };\n\n\t\t\t} else if ( channels.Y ) {\n\n\t\t\t\tEXRDecoder.outputChannels = 1;\n\t\t\t\tEXRDecoder.decodeChannels = { Y: 0 };\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'EXRLoader.parse: file contains unsupported data channels.' );\n\n\t\t\t}\n\n\t\t\tif ( EXRDecoder.type == 1 ) {\n\n\t\t\t\t// half\n\t\t\t\tswitch ( outputType ) {\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat16;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseUint16;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( EXRDecoder.type == 2 ) {\n\n\t\t\t\t// float\n\t\t\t\tswitch ( outputType ) {\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat32;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tEXRDecoder.getter = decodeFloat32;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.' );\n\n\t\t\t}\n\n\t\t\tEXRDecoder.columns = EXRDecoder.width;\n\t\t\tconst size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n\n\t\t\tswitch ( outputType ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\t\tEXRDecoder.byteArray = new Float32Array( size );\n\n\t\t\t\t\t// Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\t\t\t\t\tif ( fillAlpha )\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 1, 0, size );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\t\t\t\t\tEXRDecoder.byteArray = new Uint16Array( size );\n\n\t\t\t\t\tif ( fillAlpha )\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 0x3C00, 0, size ); // Uint16Array holds half float data, 0x3C00 is 1\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.EXRLoader: unsupported type: ', outputType );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlet byteOffset = 0;\n\t\t\tfor ( const channel of EXRHeader.channels ) {\n\n\t\t\t\tif ( EXRDecoder.decodeChannels[ channel.name ] !== undefined ) {\n\n\t\t\t\t\tEXRDecoder.channelByteOffsets[ channel.name ] = byteOffset;\n\n\t\t\t\t}\n\n\t\t\t\tbyteOffset += channel.pixelType * 2;\n\n\t\t\t}\n\n\t\t\tEXRDecoder.totalBytes = byteOffset;\n\t\t\tEXRDecoder.outLineWidth = EXRDecoder.width * EXRDecoder.outputChannels;\n\n\t\t\tif ( EXRHeader.lineOrder === 'INCREASING_Y' ) {\n\n\t\t\t\tEXRDecoder.scanOrder = ( y ) => y;\n\n\t\t\t} else {\n\n\t\t\t\tEXRDecoder.scanOrder = ( y ) => EXRDecoder.height - 1 - y;\n\n\t\t\t}\n\n\t\t\tif ( EXRDecoder.outputChannels == 4 ) {\n\n\t\t\t\tEXRDecoder.format = RGBAFormat;\n\t\t\t\tEXRDecoder.colorSpace = LinearSRGBColorSpace;\n\n\t\t\t} else {\n\n\t\t\t\tEXRDecoder.format = RedFormat;\n\t\t\t\tEXRDecoder.colorSpace = NoColorSpace;\n\n\t\t\t}\n\n\t\t\tif ( EXRHeader.spec.singleTile ) {\n\n\t\t\t\tEXRDecoder.blockHeight = EXRHeader.tiles.ySize;\n\t\t\t\tEXRDecoder.blockWidth = EXRHeader.tiles.xSize;\n\n\t\t\t\tconst numXLevels = calculateTileLevels( EXRHeader.tiles, EXRDecoder.width, EXRDecoder.height );\n\t\t\t\t// const numYLevels = calculateTileLevels( EXRHeader.tiles, EXRDecoder.width, EXRDecoder.height );\n\n\t\t\t\tconst numXTiles = calculateTiles( numXLevels, EXRDecoder.width, EXRHeader.tiles.xSize, EXRHeader.tiles.roundingMode );\n\t\t\t\tconst numYTiles = calculateTiles( numXLevels, EXRDecoder.height, EXRHeader.tiles.ySize, EXRHeader.tiles.roundingMode );\n\n\t\t\t\tEXRDecoder.tileCount = numXTiles[ 0 ] * numYTiles[ 0 ];\n\n\t\t\t\tfor ( let l = 0; l < numXLevels; l ++ )\n\t\t\t\t\tfor ( let y = 0; y < numYTiles[ l ]; y ++ )\n\t\t\t\t\t\tfor ( let x = 0; x < numXTiles[ l ]; x ++ )\n\t\t\t\t\t\t\tparseInt64( dataView, offset ); // tileOffset\n\n\t\t\t\tEXRDecoder.decode = parseTiles.bind( EXRDecoder );\n\n\t\t\t} else {\n\n\t\t\t\tEXRDecoder.blockWidth = EXRDecoder.width;\n\t\t\t\tconst blockCount = Math.ceil( EXRDecoder.height / EXRDecoder.blockHeight );\n\n\t\t\t\tfor ( let i = 0; i < blockCount; i ++ )\n\t\t\t\t\tparseInt64( dataView, offset ); // scanlineOffset\n\n\t\t\t\tEXRDecoder.decode = parseScanline.bind( EXRDecoder );\n\n\t\t\t}\n\n\t\t\treturn EXRDecoder;\n\n\t\t}\n\n\t\t// start parsing file [START]\n\t\tconst offset = { value: 0 };\n\t\tconst bufferDataView = new DataView( buffer );\n\t\tconst uInt8Array = new Uint8Array( buffer );\n\n\t\t// get header information and validate format.\n\t\tconst EXRHeader = parseHeader( bufferDataView, buffer, offset );\n\n\t\t// get input compression information and prepare decoding.\n\t\tconst EXRDecoder = setupDecoder( EXRHeader, bufferDataView, uInt8Array, offset, this.type );\n\n\t\t// parse input data\n\t\tEXRDecoder.decode();\n\n\t\treturn {\n\t\t\theader: EXRHeader,\n\t\t\twidth: EXRDecoder.width,\n\t\t\theight: EXRDecoder.height,\n\t\t\tdata: EXRDecoder.byteArray,\n\t\t\tformat: EXRDecoder.format,\n\t\t\tcolorSpace: EXRDecoder.colorSpace,\n\t\t\ttype: this.type,\n\t\t};\n\n\t}\n\n\t/**\n\t * Sets the texture type.\n\t *\n\t * @param {(HalfFloatType|FloatType)} value - The texture type to set.\n\t * @return {RGBMLoader} A reference to this loader.\n\t */\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\ttexture.colorSpace = texData.colorSpace;\n\t\t\ttexture.minFilter = LinearFilter;\n\t\t\ttexture.magFilter = LinearFilter;\n\t\t\ttexture.generateMipmaps = false;\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { EXRLoader };\n","/**\n * @module CopyShader\n * @three_import import { CopyShader } from 'three/addons/shaders/CopyShader.js';\n */\n\n/**\n * Full-screen copy shader pass.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst CopyShader = {\n\n\tname: 'CopyShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\n/**\n * Abstract base class for all post processing passes.\n *\n * This module is only relevant for post processing with {@link WebGLRenderer}.\n *\n * @abstract\n * @three_import import { Pass } from 'three/addons/postprocessing/Pass.js';\n */\nclass Pass {\n\n\t/**\n\t * Constructs a new pass.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPass = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass is processed by the composer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass indicates to swap read and write buffer after rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.needsSwap = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass clears its buffer before rendering\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clear = false;\n\n\t\t/**\n\t\t * If set to `true`, the result of the pass is rendered to screen. The last pass in the composers\n\t\t * pass chain gets automatically rendered to screen, no matter how this property is configured.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @abstract\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( /* width, height */ ) {}\n\n\t/**\n\t * This method holds the render logic of a pass. It must be implemented in all derived classes.\n\t *\n\t * @abstract\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t *\n\t * @abstract\n\t */\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\n\n/**\n * This module is a helper for passes which need to render a full\n * screen effect which is quite common in context of post processing.\n *\n * The intended usage is to reuse a single full screen quad for rendering\n * subsequent passes by just reassigning the `material` reference.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * @augments Mesh\n * @three_import import { FullScreenQuad } from 'three/addons/postprocessing/Pass.js';\n */\nclass FullScreenQuad {\n\n\t/**\n\t * Constructs a new full screen quad.\n\t *\n\t * @param {?Material} material - The material to render te full screen quad with.\n\t */\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\t/**\n\t * Renders the full screen quad.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t */\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\t/**\n\t * The quad's material.\n\t *\n\t * @type {?Material}\n\t */\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\n/**\n * This pass can be used to create a post processing effect\n * with a raw GLSL shader object. Useful for implementing custom\n * effects.\n *\n * ```js\n * const fxaaPass = new ShaderPass( FXAAShader );\n * composer.addPass( fxaaPass );\n * ```\n *\n * @augments Pass\n * @three_import import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';\n */\nclass ShaderPass extends Pass {\n\n\t/**\n\t * Constructs a new shader pass.\n\t *\n\t * @param {Object|ShaderMaterial} [shader] - A shader object holding vertex and fragment shader as well as\n\t * defines and uniforms. It's also valid to pass a custom shader material.\n\t * @param {string} [textureID='tDiffuse'] - The name of the texture uniform that should sample\n\t * the read buffer.\n\t */\n\tconstructor( shader, textureID = 'tDiffuse' ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The name of the texture uniform that should sample the read buffer.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'tDiffuse'\n\t\t */\n\t\tthis.textureID = textureID;\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {?Object}\n\t\t */\n\t\tthis.uniforms = null;\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {?ShaderMaterial}\n\t\t */\n\t\tthis.material = null;\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Performs the shader pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis._fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Pass } from './Pass.js';\n\n/**\n * This pass can be used to define a mask during post processing.\n * Meaning only areas of subsequent post processing are affected\n * which lie in the masking area of this pass. Internally, the masking\n * is implemented with the stencil buffer.\n *\n * ```js\n * const maskPass = new MaskPass( scene, camera );\n * composer.addPass( maskPass );\n * ```\n *\n * @augments Pass\n * @three_import import { MaskPass } from 'three/addons/postprocessing/MaskPass.js';\n */\nclass MaskPass extends Pass {\n\n\t/**\n\t * Constructs a new mask pass.\n\t *\n\t * @param {Scene} scene - The 3D objects in this scene will define the mask.\n\t * @param {Camera} camera - The camera.\n\t */\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene that defines the mask.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t/**\n\t\t * Whether to inverse the mask or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.inverse = false;\n\n\t}\n\n\t/**\n\t * Performs a mask pass with the configured scene and camera.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\tstate.buffers.color.setMask( true );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\n/**\n * This pass can be used to clear a mask previously defined with {@link MaskPass}.\n *\n * ```js\n * const clearPass = new ClearMaskPass();\n * composer.addPass( clearPass );\n * ```\n *\n * @augments Pass\n */\nclass ClearMaskPass extends Pass {\n\n\t/**\n\t * Constructs a new clear mask pass.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t}\n\n\t/**\n\t * Performs the clear of the currently defined mask.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tClock,\n\tHalfFloatType,\n\tNoBlending,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { ClearMaskPass, MaskPass } from './MaskPass.js';\n\n/**\n * Used to implement post-processing effects in three.js.\n * The class manages a chain of post-processing passes to produce the final visual result.\n * Post-processing passes are executed in order of their addition/insertion.\n * The last pass is automatically rendered to screen.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * ```js\n * const composer = new EffectComposer( renderer );\n *\n * // adding some passes\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n *\n * const glitchPass = new GlitchPass();\n * composer.addPass( glitchPass );\n *\n * const outputPass = new OutputPass()\n * composer.addPass( outputPass );\n *\n * function animate() {\n *\n * \tcomposer.render(); // instead of renderer.render()\n *\n * }\n * ```\n *\n * @three_import import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\n */\nclass EffectComposer {\n\n\t/**\n\t * Constructs a new effect composer.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target and a clone will\n\t * be used as the internal read and write buffers. If not given, the composer creates\n\t * the buffers automatically.\n\t */\n\tconstructor( renderer, renderTarget ) {\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {WebGLRenderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\t/**\n\t\t * A reference to the internal write buffer. Passes usually write\n\t\t * their result into this buffer.\n\t\t *\n\t\t * @type {WebGLRenderTarget}\n\t\t */\n\t\tthis.writeBuffer = this.renderTarget1;\n\n\t\t/**\n\t\t * A reference to the internal read buffer. Passes usually read\n\t\t * the previous render result from this buffer.\n\t\t *\n\t\t * @type {WebGLRenderTarget}\n\t\t */\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t/**\n\t\t * Whether the final pass is rendered to the screen (default framebuffer) or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.renderToScreen = true;\n\n\t\t/**\n\t\t * An array representing the (ordered) chain of post-processing passes.\n\t\t *\n\t\t * @type {Array<Pass>}\n\t\t */\n\t\tthis.passes = [];\n\n\t\t/**\n\t\t * A copy pass used for internal swap operations.\n\t\t *\n\t\t * @private\n\t\t * @type {ShaderPass}\n\t\t */\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\t\tthis.copyPass.material.blending = NoBlending;\n\n\t\t/**\n\t\t * The internal clock for managing time data.\n\t\t *\n\t\t * @private\n\t\t * @type {Clock}\n\t\t */\n\t\tthis.clock = new Clock();\n\n\t}\n\n\t/**\n\t * Swaps the internal read/write buffers.\n\t */\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\t/**\n\t * Adds the given pass to the pass chain.\n\t *\n\t * @param {Pass} pass - The pass to add.\n\t */\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\t/**\n\t * Inserts the given pass at a given index.\n\t *\n\t * @param {Pass} pass - The pass to insert.\n\t * @param {number} index - The index into the pass chain.\n\t */\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\t/**\n\t * Removes the given pass from the pass chain.\n\t *\n\t * @param {Pass} pass - The pass to remove.\n\t */\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the pass for the given index is the last enabled pass in the pass chain.\n\t *\n\t * @param {number} passIndex - The pass index.\n\t * @return {boolean} Whether the pass for the given index is the last pass in the pass chain.\n\t */\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Executes all enabled post-processing passes in order to produce the final frame.\n\t *\n\t * @param {number} deltaTime - The delta time in seconds. If not given, the composer computes\n\t * its own time delta value.\n\t */\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\t/**\n\t * Resets the internal state of the EffectComposer.\n\t *\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target has the same purpose like\n\t * the one from the constructor. If set, it is used to setup the read and write buffers.\n\t */\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\t/**\n\t * Resizes the internal read and write buffers as well as all passes. Similar to {@link WebGLRenderer#setSize},\n\t * this method honors the current pixel ration.\n\t *\n\t * @param {number} width - The width in logical pixels.\n\t * @param {number} height - The height in logical pixels.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets device pixel ratio. This is usually used for HiDPI device to prevent blurring output.\n\t * Setting the pixel ratio will automatically resize the composer.\n\t *\n\t * @param {number} pixelRatio - The pixel ratio to set.\n\t */\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the composer is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class represents a render pass. It takes a camera and a scene and produces\n * a beauty pass for subsequent post processing effects.\n *\n * ```js\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n * ```\n *\n * @augments Pass\n * @three_import import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\n */\nclass RenderPass extends Pass {\n\n\t/**\n\t * Constructs a new render pass.\n\t *\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera.\n\t * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\n\t * for all objects in the scene.\n\t * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\n\t * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\n\t */\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The override material. If set, this material is used\n\t\t * for all objects in the scene.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\t/**\n\t\t * The clear color of the render pass.\n\t\t *\n\t\t * @type {?(number|Color|string)}\n\t\t * @default null\n\t\t */\n\t\tthis.clearColor = clearColor;\n\n\t\t/**\n\t\t * The clear alpha of the render pass.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * If set to `true`, only the depth can be cleared when `clear` is to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clearDepth = false;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Performs a beauty pass with the configured scene and camera.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth == true ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\tif ( this.clear === true ) {\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// restore\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","import {\n\tColor\n} from 'three';\n\n/**\n * @module LuminosityHighPassShader\n * @three_import import { LuminosityHighPassShader } from 'three/addons/shaders/LuminosityHighPassShader.js';\n */\n\n/**\n * Luminosity high pass shader.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst LuminosityHighPassShader = {\n\n\tname: 'LuminosityHighPassShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tfloat v = luminance( texel.xyz );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tHalfFloatType,\n\tMeshBasicMaterial,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * This pass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * When using this pass, tone mapping must be enabled in the renderer settings.\n *\n * Reference:\n * - [Bloom in Unreal Engine]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/}\n *\n * ```js\n * const resolution = new THREE.Vector2( window.innerWidth, window.innerHeight );\n * const bloomPass = new UnrealBloomPass( resolution, 1.5, 0.4, 0.85 );\n * composer.addPass( bloomPass );\n * ```\n *\n * @augments Pass\n * @three_import import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\n */\nclass UnrealBloomPass extends Pass {\n\n\t/**\n\t * Constructs a new Unreal Bloom pass.\n\t *\n\t * @param {Vector2} [resolution] - The effect's resolution.\n\t * @param {number} [strength=1] - The Bloom strength.\n\t * @param {number} radius - The Bloom radius.\n\t * @param {number} threshold - The luminance threshold limits which bright areas contribute to the Bloom effect.\n\t */\n\tconstructor( resolution, strength = 1, radius, threshold ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The Bloom strength.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.strength = strength;\n\n\t\t/**\n\t\t * The Bloom radius.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * The luminance threshold limits which bright areas contribute to the Bloom effect.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.threshold = threshold;\n\n\t\t/**\n\t\t * The effect's resolution.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (256,256)\n\t\t */\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t/**\n\t\t * The effect's clear color\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t// internals\n\n\t\t// render targets\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizontal = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\n\t\t\trenderTargetHorizontal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizontal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizontal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader\n\t\t} );\n\n\t\t// gaussian blur materials\n\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this._getSeparableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// composite material\n\n\t\tthis.compositeMaterial = this._getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// blend material\n\n\t\tthis.copyUniforms = UniformsUtils.clone( CopyShader.uniforms );\n\n\t\tthis.blendMaterial = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis._oldClearAlpha = 1;\n\n\t\tthis._basic = new MeshBasicMaterial();\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t\t//\n\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\n\n\t\t}\n\n\t\tthis.compositeMaterial.dispose();\n\t\tthis.blendMaterial.dispose();\n\t\tthis._basic.dispose();\n\n\t\t//\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Performs the Bloom pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis._oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis._fsQuad.material = this._basic;\n\t\t\tthis._basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis._fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis._fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis._fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis._fsQuad.material = this.blendMaterial;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this._oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\t// internals\n\n\t_getSeparableBlurMaterial( kernelRadius ) {\n\n\t\tconst coefficients = [];\n\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\n\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\n\n\t\t}\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'invSize': { value: new Vector2( 0.5, 0.5 ) }, // inverse texture size\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'gaussianCoefficients': { value: coefficients } // precomputed Gaussian coefficients\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 invSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float gaussianCoefficients[KERNEL_RADIUS];\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat weightSum = gaussianCoefficients[0];\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianCoefficients[i];\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\t_getCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import {\n\tVector2\n} from 'three';\n\n/**\n * @module FXAAShader\n * @three_import import { FXAAShader } from 'three/addons/shaders/FXAAShader.js';\n */\n\n/**\n * FXAA algorithm from NVIDIA, C# implementation by Jasper Flick, GLSL port by Dave Hoskins.\n *\n * References:\n * - {@link http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf}.\n * - {@link https://catlikecoding.com/unity/tutorials/advanced-rendering/fxaa/}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst FXAAShader = {\n\n\tname: 'FXAAShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'resolution': { value: new Vector2( 1 / 1024, 1 / 512 ) }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 resolution;\n\t\tvarying vec2 vUv;\n\n\t\t#define EDGE_STEP_COUNT 6\n\t\t#define EDGE_GUESS 8.0\n\t\t#define EDGE_STEPS 1.0, 1.5, 2.0, 2.0, 2.0, 4.0\n\t\tconst float edgeSteps[EDGE_STEP_COUNT] = float[EDGE_STEP_COUNT]( EDGE_STEPS );\n\n\t\tfloat _ContrastThreshold = 0.0312;\n\t\tfloat _RelativeThreshold = 0.063;\n\t\tfloat _SubpixelBlending = 1.0;\n\n\t\tvec4 Sample( sampler2D  tex2D, vec2 uv ) {\n\n\t\t\treturn texture( tex2D, uv );\n\n\t\t}\n\n\t\tfloat SampleLuminance( sampler2D tex2D, vec2 uv ) {\n\n\t\t\treturn dot( Sample( tex2D, uv ).rgb, vec3( 0.3, 0.59, 0.11 ) );\n\n\t\t}\n\n\t\tfloat SampleLuminance( sampler2D tex2D, vec2 texSize, vec2 uv, float uOffset, float vOffset ) {\n\n\t\t\tuv += texSize * vec2(uOffset, vOffset);\n\t\t\treturn SampleLuminance(tex2D, uv);\n\n\t\t}\n\n\t\tstruct LuminanceData {\n\n\t\t\tfloat m, n, e, s, w;\n\t\t\tfloat ne, nw, se, sw;\n\t\t\tfloat highest, lowest, contrast;\n\n\t\t};\n\n\t\tLuminanceData SampleLuminanceNeighborhood( sampler2D tex2D, vec2 texSize, vec2 uv ) {\n\n\t\t\tLuminanceData l;\n\t\t\tl.m = SampleLuminance( tex2D, uv );\n\t\t\tl.n = SampleLuminance( tex2D, texSize, uv,  0.0,  1.0 );\n\t\t\tl.e = SampleLuminance( tex2D, texSize, uv,  1.0,  0.0 );\n\t\t\tl.s = SampleLuminance( tex2D, texSize, uv,  0.0, -1.0 );\n\t\t\tl.w = SampleLuminance( tex2D, texSize, uv, -1.0,  0.0 );\n\n\t\t\tl.ne = SampleLuminance( tex2D, texSize, uv,  1.0,  1.0 );\n\t\t\tl.nw = SampleLuminance( tex2D, texSize, uv, -1.0,  1.0 );\n\t\t\tl.se = SampleLuminance( tex2D, texSize, uv,  1.0, -1.0 );\n\t\t\tl.sw = SampleLuminance( tex2D, texSize, uv, -1.0, -1.0 );\n\n\t\t\tl.highest = max( max( max( max( l.n, l.e ), l.s ), l.w ), l.m );\n\t\t\tl.lowest = min( min( min( min( l.n, l.e ), l.s ), l.w ), l.m );\n\t\t\tl.contrast = l.highest - l.lowest;\n\t\t\treturn l;\n\n\t\t}\n\n\t\tbool ShouldSkipPixel( LuminanceData l ) {\n\n\t\t\tfloat threshold = max( _ContrastThreshold, _RelativeThreshold * l.highest );\n\t\t\treturn l.contrast < threshold;\n\n\t\t}\n\n\t\tfloat DeterminePixelBlendFactor( LuminanceData l ) {\n\n\t\t\tfloat f = 2.0 * ( l.n + l.e + l.s + l.w );\n\t\t\tf += l.ne + l.nw + l.se + l.sw;\n\t\t\tf *= 1.0 / 12.0;\n\t\t\tf = abs( f - l.m );\n\t\t\tf = clamp( f / l.contrast, 0.0, 1.0 );\n\n\t\t\tfloat blendFactor = smoothstep( 0.0, 1.0, f );\n\t\t\treturn blendFactor * blendFactor * _SubpixelBlending;\n\n\t\t}\n\n\t\tstruct EdgeData {\n\n\t\t\tbool isHorizontal;\n\t\t\tfloat pixelStep;\n\t\t\tfloat oppositeLuminance, gradient;\n\n\t\t};\n\n\t\tEdgeData DetermineEdge( vec2 texSize, LuminanceData l ) {\n\n\t\t\tEdgeData e;\n\t\t\tfloat horizontal =\n\t\t\t\tabs( l.n + l.s - 2.0 * l.m ) * 2.0 +\n\t\t\t\tabs( l.ne + l.se - 2.0 * l.e ) +\n\t\t\t\tabs( l.nw + l.sw - 2.0 * l.w );\n\t\t\tfloat vertical =\n\t\t\t\tabs( l.e + l.w - 2.0 * l.m ) * 2.0 +\n\t\t\t\tabs( l.ne + l.nw - 2.0 * l.n ) +\n\t\t\t\tabs( l.se + l.sw - 2.0 * l.s );\n\t\t\te.isHorizontal = horizontal >= vertical;\n\n\t\t\tfloat pLuminance = e.isHorizontal ? l.n : l.e;\n\t\t\tfloat nLuminance = e.isHorizontal ? l.s : l.w;\n\t\t\tfloat pGradient = abs( pLuminance - l.m );\n\t\t\tfloat nGradient = abs( nLuminance - l.m );\n\n\t\t\te.pixelStep = e.isHorizontal ? texSize.y : texSize.x;\n\n\t\t\tif (pGradient < nGradient) {\n\n\t\t\t\te.pixelStep = -e.pixelStep;\n\t\t\t\te.oppositeLuminance = nLuminance;\n\t\t\t\te.gradient = nGradient;\n\n\t\t\t} else {\n\n\t\t\t\te.oppositeLuminance = pLuminance;\n\t\t\t\te.gradient = pGradient;\n\n\t\t\t}\n\n\t\t\treturn e;\n\n\t\t}\n\n\t\tfloat DetermineEdgeBlendFactor( sampler2D  tex2D, vec2 texSize, LuminanceData l, EdgeData e, vec2 uv ) {\n\n\t\t\tvec2 uvEdge = uv;\n\t\t\tvec2 edgeStep;\n\t\t\tif (e.isHorizontal) {\n\n\t\t\t\tuvEdge.y += e.pixelStep * 0.5;\n\t\t\t\tedgeStep = vec2( texSize.x, 0.0 );\n\n\t\t\t} else {\n\n\t\t\t\tuvEdge.x += e.pixelStep * 0.5;\n\t\t\t\tedgeStep = vec2( 0.0, texSize.y );\n\n\t\t\t}\n\n\t\t\tfloat edgeLuminance = ( l.m + e.oppositeLuminance ) * 0.5;\n\t\t\tfloat gradientThreshold = e.gradient * 0.25;\n\n\t\t\tvec2 puv = uvEdge + edgeStep * edgeSteps[0];\n\t\t\tfloat pLuminanceDelta = SampleLuminance( tex2D, puv ) - edgeLuminance;\n\t\t\tbool pAtEnd = abs( pLuminanceDelta ) >= gradientThreshold;\n\n\t\t\tfor ( int i = 1; i < EDGE_STEP_COUNT && !pAtEnd; i++ ) {\n\n\t\t\t\tpuv += edgeStep * edgeSteps[i];\n\t\t\t\tpLuminanceDelta = SampleLuminance( tex2D, puv ) - edgeLuminance;\n\t\t\t\tpAtEnd = abs( pLuminanceDelta ) >= gradientThreshold;\n\n\t\t\t}\n\n\t\t\tif ( !pAtEnd ) {\n\n\t\t\t\tpuv += edgeStep * EDGE_GUESS;\n\n\t\t\t}\n\n\t\t\tvec2 nuv = uvEdge - edgeStep * edgeSteps[0];\n\t\t\tfloat nLuminanceDelta = SampleLuminance( tex2D, nuv ) - edgeLuminance;\n\t\t\tbool nAtEnd = abs( nLuminanceDelta ) >= gradientThreshold;\n\n\t\t\tfor ( int i = 1; i < EDGE_STEP_COUNT && !nAtEnd; i++ ) {\n\n\t\t\t\tnuv -= edgeStep * edgeSteps[i];\n\t\t\t\tnLuminanceDelta = SampleLuminance( tex2D, nuv ) - edgeLuminance;\n\t\t\t\tnAtEnd = abs( nLuminanceDelta ) >= gradientThreshold;\n\n\t\t\t}\n\n\t\t\tif ( !nAtEnd ) {\n\n\t\t\t\tnuv -= edgeStep * EDGE_GUESS;\n\n\t\t\t}\n\n\t\t\tfloat pDistance, nDistance;\n\t\t\tif ( e.isHorizontal ) {\n\n\t\t\t\tpDistance = puv.x - uv.x;\n\t\t\t\tnDistance = uv.x - nuv.x;\n\n\t\t\t} else {\n\n\t\t\t\tpDistance = puv.y - uv.y;\n\t\t\t\tnDistance = uv.y - nuv.y;\n\n\t\t\t}\n\n\t\t\tfloat shortestDistance;\n\t\t\tbool deltaSign;\n\t\t\tif ( pDistance <= nDistance ) {\n\n\t\t\t\tshortestDistance = pDistance;\n\t\t\t\tdeltaSign = pLuminanceDelta >= 0.0;\n\n\t\t\t} else {\n\n\t\t\t\tshortestDistance = nDistance;\n\t\t\t\tdeltaSign = nLuminanceDelta >= 0.0;\n\n\t\t\t}\n\n\t\t\tif ( deltaSign == ( l.m - edgeLuminance >= 0.0 ) ) {\n\n\t\t\t\treturn 0.0;\n\n\t\t\t}\n\n\t\t\treturn 0.5 - shortestDistance / ( pDistance + nDistance );\n\n\t\t}\n\n\t\tvec4 ApplyFXAA( sampler2D  tex2D, vec2 texSize, vec2 uv ) {\n\n\t\t\tLuminanceData luminance = SampleLuminanceNeighborhood( tex2D, texSize, uv );\n\t\t\tif ( ShouldSkipPixel( luminance ) ) {\n\n\t\t\t\treturn Sample( tex2D, uv );\n\n\t\t\t}\n\n\t\t\tfloat pixelBlend = DeterminePixelBlendFactor( luminance );\n\t\t\tEdgeData edge = DetermineEdge( texSize, luminance );\n\t\t\tfloat edgeBlend = DetermineEdgeBlendFactor( tex2D, texSize, luminance, edge, uv );\n\t\t\tfloat finalBlend = max( pixelBlend, edgeBlend );\n\n\t\t\tif (edge.isHorizontal) {\n\n\t\t\t\tuv.y += edge.pixelStep * finalBlend;\n\n\t\t\t} else {\n\n\t\t\t\tuv.x += edge.pixelStep * finalBlend;\n\n\t\t\t}\n\n\t\t\treturn Sample( tex2D, uv );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = ApplyFXAA( tDiffuse, resolution.xy, vUv );\n\n\t\t}`\n\n};\n\nexport { FXAAShader };\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\nconst vs = `precision highp float;\n\nin vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}`;\n\nconst fs = `precision highp float;\n\nout vec4 fragmentColor;\n\nuniform vec2 resolution;\nuniform float rand;\n\nvoid main() {\n  float aspectRatio = resolution.x / resolution.y; \n  vec2 vUv = gl_FragCoord.xy / resolution;\n  float noise = (fract(sin(dot(vUv, vec2(12.9898 + rand,78.233)*2.0)) * 43758.5453));\n\n  vUv -= .5;\n  vUv.x *= aspectRatio;\n\n  float factor = 4.;\n  float d = factor * length(vUv);\n  vec3 from = vec3(3.) / 255.;\n  vec3 to = vec3(16., 12., 20.) / 2550.;\n\n  fragmentColor = vec4(mix(from, to, d) + .005 * noise, 1.);\n}\n`;\n\nexport {fs, vs};\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\nconst vs = `#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n  varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nuniform float time;\n\nuniform vec4 inputData;\nuniform vec4 outputData;\n\nvec3 calc( vec3 pos ) {\n\n  vec3 dir = normalize( pos );\n  vec3 p = dir + vec3( time, 0., 0. );\n  return pos +\n    1. * inputData.x * inputData.y * dir * (.5 + .5 * sin(inputData.z * pos.x + time)) +\n    1. * outputData.x * outputData.y * dir * (.5 + .5 * sin(outputData.z * pos.y + time))\n  ;\n}\n\nvec3 spherical( float r, float theta, float phi ) {\n  return r * vec3(\n    cos( theta ) * cos( phi ),\n    sin( theta ) * cos( phi ),\n    sin( phi )\n  );\n}\n\nvoid main() {\n  #include <uv_vertex>\n  #include <color_vertex>\n  #include <morphinstance_vertex>\n  #include <morphcolor_vertex>\n  #include <batching_vertex>\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n  #include <defaultnormal_vertex>\n  #include <normal_vertex>\n  #include <begin_vertex>\n\n  float inc = 0.001;\n\n  float r = length( position );\n  float theta = ( uv.x + 0.5 ) * 2. * PI;\n  float phi = -( uv.y + 0.5 ) * PI;\n\n  vec3 np = calc( spherical( r, theta, phi )  );\n\n  vec3 tangent = normalize( calc( spherical( r, theta + inc, phi ) ) - np );\n  vec3 bitangent = normalize( calc( spherical( r, theta, phi + inc ) ) - np );\n  transformedNormal = -normalMatrix * normalize( cross( tangent, bitangent ) );\n\n  vNormal = normalize( transformedNormal );\n\n  transformed = np;\n\n  #include <morphtarget_vertex>\n  #include <skinning_vertex>\n  #include <displacementmap_vertex>\n  #include <project_vertex>\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n  vViewPosition = - mvPosition.xyz;\n  #include <worldpos_vertex>\n  #include <shadowmap_vertex>\n  #include <fog_vertex>\n  #ifdef USE_TRANSMISSION\n    vWorldPosition = worldPosition.xyz;\n  #endif\n}`;\n\nexport {vs};\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// tslint:disable:organize-imports\n// tslint:disable:ban-malformed-import-paths\n// tslint:dsiable:no-new-decorators\n\nimport {LitElement, css, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {Analyser} from './analyser';\n\nimport * as THREE from 'three';\nimport {EXRLoader} from 'three/examples/jsm/loaders/EXRLoader.js';\nimport {EffectComposer} from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport {ShaderPass} from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport {UnrealBloomPass} from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport {FXAAShader} from 'three/examples/jsm/shaders/FXAAShader.js';\nimport {fs as backdropFS, vs as backdropVS} from './backdrop-shader';\nimport {vs as sphereVS} from './sphere-shader';\n\n/**\n * 3D live audio visual.\n */\n@customElement('gdm-live-audio-visuals-3d')\nexport class GdmLiveAudioVisuals3D extends LitElement {\n  private inputAnalyser!: Analyser;\n  private outputAnalyser!: Analyser;\n  private camera!: THREE.PerspectiveCamera;\n  private backdrop!: THREE.Mesh;\n  private composer!: EffectComposer;\n  private sphere!: THREE.Mesh;\n  private prevTime = 0;\n  private rotation = new THREE.Vector3(0, 0, 0);\n\n  private _outputNode!: AudioNode;\n\n  @property()\n  set outputNode(node: AudioNode) {\n    this._outputNode = node;\n    this.outputAnalyser = new Analyser(this._outputNode);\n  }\n\n  get outputNode() {\n    return this._outputNode;\n  }\n\n  private _inputNode!: AudioNode;\n\n  @property()\n  set inputNode(node: AudioNode) {\n    this._inputNode = node;\n    this.inputAnalyser = new Analyser(this._inputNode);\n  }\n\n  get inputNode() {\n    return this._inputNode;\n  }\n\n  private canvas!: HTMLCanvasElement;\n\n  static styles = css`\n    canvas {\n      width: 100% !important;\n      height: 100% !important;\n      position: absolute;\n      inset: 0;\n      image-rendering: pixelated;\n    }\n  `;\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  private init() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x100c14);\n\n    const backdrop = new THREE.Mesh(\n      new THREE.IcosahedronGeometry(10, 5),\n      new THREE.RawShaderMaterial({\n        uniforms: {\n          resolution: {value: new THREE.Vector2(1, 1)},\n          rand: {value: 0},\n        },\n        vertexShader: backdropVS,\n        fragmentShader: backdropFS,\n        glslVersion: THREE.GLSL3,\n      }),\n    );\n    backdrop.material.side = THREE.BackSide;\n    scene.add(backdrop);\n    this.backdrop = backdrop;\n\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000,\n    );\n    camera.position.set(2, -2, 5);\n    this.camera = camera;\n\n    const renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: !true,\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio / 1);\n\n    const geometry = new THREE.IcosahedronGeometry(1, 10);\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\n    pmremGenerator.compileEquirectangularShader();\n\n    const sphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0x000010,\n      metalness: 0.5,\n      roughness: 0.1,\n      emissive: 0x000010,\n      emissiveIntensity: 1.5,\n    });\n\n    sphereMaterial.onBeforeCompile = (shader: any) => {\n      shader.uniforms.time = {value: 0};\n      shader.uniforms.inputData = {value: new THREE.Vector4()};\n      shader.uniforms.outputData = {value: new THREE.Vector4()};\n\n      sphereMaterial.userData.shader = shader;\n\n      shader.vertexShader = sphereVS;\n    };\n\n    const sphere = new THREE.Mesh(geometry, sphereMaterial);\n    scene.add(sphere);\n    sphere.visible = false;\n    this.sphere = sphere;\n\n    new EXRLoader().load(\n      '/piz_compressed.exr',\n      (texture: THREE.Texture) => {\n        texture.mapping = THREE.EquirectangularReflectionMapping;\n        const exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n        sphereMaterial.envMap = exrCubeRenderTarget.texture;\n        sphere.visible = true;\n      },\n      undefined,\n      (error) => {\n        console.error('Error loading EXR:', error);\n        sphere.visible = true;\n      }\n    );\n\n    const renderPass = new RenderPass(scene, camera);\n\n    const bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      5,\n      0.5,\n      0,\n    );\n\n    const fxaaPass = new ShaderPass(FXAAShader);\n\n    const composer = new EffectComposer(renderer);\n    composer.addPass(renderPass);\n    // composer.addPass(fxaaPass);\n    composer.addPass(bloomPass);\n\n    this.composer = composer;\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      const dPR = renderer.getPixelRatio();\n      const w = window.innerWidth;\n      const h = window.innerHeight;\n      backdrop.material.uniforms.resolution.value.set(w * dPR, h * dPR);\n      renderer.setSize(w, h);\n      composer.setSize(w, h);\n      fxaaPass.material.uniforms['resolution'].value.set(\n        1 / (w * dPR),\n        1 / (h * dPR),\n      );\n    }\n\n    window.addEventListener('resize', onWindowResize);\n    onWindowResize();\n\n    this.animation();\n  }\n\n  private animation() {\n    requestAnimationFrame(() => this.animation());\n\n    this.inputAnalyser.update();\n    this.outputAnalyser.update();\n\n    const t = performance.now();\n    const dt = (t - this.prevTime) / (1000 / 60);\n    this.prevTime = t;\n    const backdropMaterial = this.backdrop.material as THREE.RawShaderMaterial;\n    const sphereMaterial = this.sphere.material as THREE.MeshStandardMaterial;\n\n    backdropMaterial.uniforms.rand.value = Math.random() * 10000;\n\n    if (sphereMaterial.userData.shader) {\n      this.sphere.scale.setScalar(\n        1 + (0.2 * this.outputAnalyser.data[1]) / 255,\n      );\n\n      const f = 0.001;\n      this.rotation.x += (dt * f * 0.5 * this.outputAnalyser.data[1]) / 255;\n      this.rotation.z += (dt * f * 0.5 * this.inputAnalyser.data[1]) / 255;\n      this.rotation.y += (dt * f * 0.25 * this.inputAnalyser.data[2]) / 255;\n      this.rotation.y += (dt * f * 0.25 * this.outputAnalyser.data[2]) / 255;\n\n      const euler = new THREE.Euler(\n        this.rotation.x,\n        this.rotation.y,\n        this.rotation.z,\n      );\n      const quaternion = new THREE.Quaternion().setFromEuler(euler);\n      const vector = new THREE.Vector3(0, 0, 5);\n      vector.applyQuaternion(quaternion);\n      this.camera.position.copy(vector);\n      this.camera.lookAt(this.sphere.position);\n\n      sphereMaterial.userData.shader.uniforms.time.value +=\n        (dt * 0.1 * this.outputAnalyser.data[0]) / 255;\n      sphereMaterial.userData.shader.uniforms.inputData.value.set(\n        (1 * this.inputAnalyser.data[0]) / 255,\n        (0.1 * this.inputAnalyser.data[1]) / 255,\n        (10 * this.inputAnalyser.data[2]) / 255,\n        0,\n      );\n      sphereMaterial.userData.shader.uniforms.outputData.value.set(\n        (2 * this.outputAnalyser.data[0]) / 255,\n        (0.1 * this.outputAnalyser.data[1]) / 255,\n        (10 * this.outputAnalyser.data[2]) / 255,\n        0,\n      );\n    }\n\n    this.composer.render();\n  }\n\n  protected firstUpdated() {\n    this.canvas = this.shadowRoot!.querySelector('canvas') as HTMLCanvasElement;\n    this.init();\n  }\n\n  protected render() {\n    return html`<canvas></canvas>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gdm-live-audio-visuals-3d': GdmLiveAudioVisuals3D;\n  }\n}\n","/* tslint:disable */\n/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {GoogleGenAI, LiveServerMessage, Modality, Session} from '@google/genai';\nimport {LitElement, css, html} from 'lit';\nimport {customElement, state, property} from 'lit/decorators.js';\nimport {createBlob, decode, decodeAudioData} from './utils';\nimport './visual-3d';\n\n// Helper to get the AudioContext class, accommodating vendor prefixes\nconst AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;\n\nconst MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024; // 20MB\ntype InstructionMode = 'file' | 'manual';\n\n@customElement('gdm-live-audio')\nexport class GdmLiveAudio extends LitElement {\n  @state() isRecording = false;\n  @state() status = 'Choose instruction method: Upload a file or type manually.';\n  @state() error = '';\n  @state() private selectedFile: File | null = null;\n  @state() private systemInstructionFromFile: string | null = null;\n  @state() private isFileProcessing = false;\n  @state() private isSessionInitialized = false;\n  @state() private instructionMode: InstructionMode = 'file';\n  @state() private manualSystemInstruction = '';\n\n  private _apiKey: string | undefined;\n  private _model: string = 'gemini-2.5-flash-preview-native-audio-dialog';\n\n  get apiKey(): string | undefined {\n    return this._apiKey;\n  }\n\n  set apiKey(value: string | undefined) {\n    const oldValue = this._apiKey;\n    this._apiKey = value;\n    this.requestUpdate('apiKey', oldValue);\n    if (value) {\n      this.initClientOnly();\n    }\n  }\n\n  get model(): string {\n    return this._model;\n  }\n\n  set model(value: string) {\n    this._model = value;\n  }\n\n  private client?: GoogleGenAI;\n  private session: Session | null = null;\n  private inputAudioContext = new AudioContextClass({sampleRate: 16000});\n  private outputAudioContext = new AudioContextClass({sampleRate: 24000});\n  @state() inputNode = this.inputAudioContext.createGain();\n  @state() outputNode = this.outputAudioContext.createGain();\n  private nextStartTime = 0;\n  private mediaStream: MediaStream | null = null;\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  private scriptProcessorNode: ScriptProcessorNode | null = null;\n  private sources = new Set<AudioBufferSourceNode>();\n  private errorTimeoutId: number | null = null;\n\n\n  static styles = css`\n    :host {\n      display: block;\n      width: 100%;\n      height: 100%;\n      position: relative;\n    }\n\n    #status {\n      position: absolute;\n      bottom: 2vh; /* Adjusted for potentially taller controls */\n      left: 0;\n      right: 0;\n      z-index: 10;\n      text-align: center;\n      padding: 0 10px;\n      color: #fff;\n      font-size: 14px;\n    }\n\n    .top-controls {\n      z-index: 10;\n      position: absolute;\n      top: 3vh; \n      left: 0;\n      right: 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: row; \n      flex-wrap: wrap; \n      gap: 10px;\n      padding: 0 10px; \n    }\n    \n    .bottom-controls-wrapper {\n      position: absolute;\n      bottom: calc(2vh + 30px); /* Position above status */\n      left: 0;\n      right: 0;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 10px;\n      z-index: 5;\n      padding: 0 10px;\n    }\n\n    .instruction-mode-selector {\n      display: flex;\n      gap: 10px;\n      margin-bottom: 5px; /* Space before the input areas */\n    }\n\n    .instruction-mode-selector button {\n      outline: none;\n      border: 1px solid rgba(255, 255, 255, 0.2);\n      color: white;\n      border-radius: 8px;\n      background: rgba(255, 255, 255, 0.1);\n      padding: 8px 15px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n\n    .instruction-mode-selector button[active] {\n      background: rgba(255, 255, 255, 0.3);\n      border-color: rgba(255, 255, 255, 0.4);\n    }\n    \n    .instruction-mode-selector button:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n    }\n\n    .file-controls-container, .manual-input-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: row;\n      flex-wrap: wrap;\n      gap: 15px;\n      width: 100%; /* Ensure containers take up available width for centering */\n    }\n    \n    .top-controls button, \n    .file-controls-container button,\n    .manual-input-container button {\n      outline: none;\n      border: 1px solid rgba(255, 255, 255, 0.2);\n      color: white;\n      border-radius: 12px;\n      background: rgba(255, 255, 255, 0.1);\n      width: auto; \n      min-width: 64px;\n      height: 64px;\n      cursor: pointer;\n      font-size: 16px;\n      padding: 0 15px;\n      margin: 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n\n      &:hover {\n        background: rgba(255, 255, 255, 0.2);\n      }\n\n      &[disabled] {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    }\n    \n    .top-controls .icon-button {\n       width: 64px;\n       font-size: 24px;\n       padding: 0;\n    }\n\n    .file-controls-container input[type=\"file\"], \n    .manual-input-container textarea {\n      color: white;\n      border: 1px solid rgba(255, 255, 255, 0.2);\n      background: rgba(255, 255, 255, 0.1);\n      padding: 0 15px;\n      border-radius: 12px;\n      cursor: pointer;\n      max-width: 280px; \n      min-width: 200px; \n      font-size: 14px;\n      height: 48px;\n      line-height: 46px;\n      box-sizing: border-box; \n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    .manual-input-container textarea {\n      height: 70px; /* More height for textarea */\n      line-height: 1.4; /* Adjust line-height for multi-line text */\n      padding: 10px 15px; /* Adjust padding for textarea */\n      white-space: pre-wrap; /* Allow text wrapping */\n      resize: none; /* Disable manual resize */\n      font-family: inherit; /* Use host font */\n    }\n\n\n    .file-controls-container input[type=\"file\"]::file-selector-button {\n      margin-right: 12px;\n      border: none;\n      background: #007bff;\n      padding: 0 15px;\n      border-radius: 8px;\n      color: white;\n      cursor: pointer;\n      transition: background-color 0.2s ease-in-out;\n      height: 32px;\n      font-size: 14px;\n    }\n\n    .file-controls-container input[type=\"file\"]::file-selector-button:hover {\n      background: #0056b3;\n    }\n\n    .file-controls-container button#processFileButton,\n    .manual-input-container button#applyManualInstructionButton {\n      height: 48px;\n      padding: 0 25px;\n      font-size: 14px;\n      min-width: 140px;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n    }\n  `;\n\n  constructor() {\n    super();\n    console.log('GdmLiveAudio constructor called');\n    this.initClientOnly();\n    this.updateInitialStatus();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    console.log('GdmLiveAudio connectedCallback called');\n  }\n\n  protected firstUpdated() {\n    console.log('GdmLiveAudio firstUpdated called');\n    // Add event listeners or perform actions after the first render\n  }\n\n  private updateInitialStatus() {\n    if (this.instructionMode === 'file') {\n        this.status = 'Please select a file (PDF, TXT, RTF, XML, CSV, DOCX), then click \"Process File\".';\n    } else {\n        this.status = 'Type your system instructions, then click \"Apply Manual Instructions\".';\n    }\n  }\n\n  private handleInstructionModeChange(newMode: InstructionMode) {\n    if (this.instructionMode === newMode) return;\n\n    this.instructionMode = newMode;\n    this.updateError(''); // Clear any errors from the previous mode\n\n    if (newMode === 'file') {\n      this.manualSystemInstruction = '';\n      this.status = 'Please select a file (PDF, TXT, RTF, XML, CSV, DOCX), then click \"Process File\".';\n    } else { // manual mode\n      this.selectedFile = null;\n      this.systemInstructionFromFile = null;\n      const fileUploadElement = this.shadowRoot?.getElementById('fileUpload') as HTMLInputElement;\n      if (fileUploadElement) {\n        fileUploadElement.value = '';\n      }\n      this.status = 'Type your system instructions, then click \"Apply Manual Instructions\".';\n    }\n    this.isSessionInitialized = false; // Changing mode requires re-init of session\n  }\n\n\n  private initAudio() {\n    this.nextStartTime = this.outputAudioContext.currentTime;\n  }\n\n  private async readFileAsBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const result = reader.result as string;\n        const base64Data = result.split(',')[1];\n        if (base64Data) {\n          resolve(base64Data);\n        } else {\n          reject(new Error('Could not extract base64 data from file.'));\n        }\n      };\n      reader.onerror = (error) => reject(error);\n      reader.readAsDataURL(file);\n    });\n  }\n\n  private async readFileAsText(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result as string);\n      };\n      reader.onerror = (error) => reject(error);\n      reader.readAsText(file);\n    });\n  }\n\n  private async extractTextFromFileContent(file: File): Promise<string | null> {\n    if (file.size > MAX_FILE_SIZE_BYTES) {\n        this.updateError(`File \"${file.name}\" exceeds the 20MB size limit.`);\n        this.updateStatus(`File \"${file.name}\" is too large. Please select a smaller file (Max 20MB).`);\n        this.selectedFile = null; \n        const fileUploadElement = this.shadowRoot?.getElementById('fileUpload') as HTMLInputElement;\n        if (fileUploadElement) {\n            fileUploadElement.value = ''; \n        }\n        return null;\n    }\n\n    this.isFileProcessing = true;\n    this.updateError(''); \n\n    const fileNameLower = file.name.toLowerCase();\n\n    try {\n      if (fileNameLower.endsWith('.txt')) {\n        this.updateStatus(`Reading ${file.name} directly for system instruction...`);\n        const text = await this.readFileAsText(file);\n        if (text && text.trim().length > 0) {\n          this.updateStatus(`Using content of ${file.name} as system instruction.`);\n          return text.trim();\n        } else {\n          throw new Error(`File ${file.name} is empty or contains only whitespace.`);\n        }\n      } else { \n        // Comment out other file type processing\n        this.updateError(`Only .txt files are supported. Please select a text file.`);\n        this.updateStatus(`File type not supported. Please select a .txt file.`);\n        return null;\n        \n        /* Commented out other file type processing\n        this.updateStatus(`Processing ${file.name} with Gemini to extract text...`);\n        \n        const base64Data = await this.readFileAsBase64(file);\n        const docxMimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        let mimeTypeForGemini = '';\n\n        if (fileNameLower.endsWith('.pdf')) mimeTypeForGemini = 'application/pdf';\n        else if (fileNameLower.endsWith('.rtf')) mimeTypeForGemini = 'application/rtf';\n        else if (fileNameLower.endsWith('.xml')) mimeTypeForGemini = 'application/xml';\n        else if (fileNameLower.endsWith('.csv')) mimeTypeForGemini = 'text/csv';\n        else if (fileNameLower.endsWith('.docx')) mimeTypeForGemini = docxMimeType;\n        \n        if (!mimeTypeForGemini) mimeTypeForGemini = file.type;\n        \n        const genericMimeTypes = ['application/octet-stream', ''];\n        if (!mimeTypeForGemini || genericMimeTypes.includes(mimeTypeForGemini.toLowerCase())) {\n          if (fileNameLower.endsWith('.pdf')) mimeTypeForGemini = 'application/pdf';\n          else if (fileNameLower.endsWith('.rtf')) mimeTypeForGemini = 'application/rtf';\n          else if (fileNameLower.endsWith('.xml')) mimeTypeForGemini = 'application/xml';\n          else if (fileNameLower.endsWith('.csv')) mimeTypeForGemini = 'text/csv';\n          else if (fileNameLower.endsWith('.docx')) mimeTypeForGemini = docxMimeType;\n          else mimeTypeForGemini = 'application/octet-stream';\n        }\n        \n        console.log(`Using MIME type for Gemini: ${mimeTypeForGemini} for file ${file.name}`);\n\n        const filePart = {\n          inlineData: {\n            mimeType: mimeTypeForGemini,\n            data: base64Data,\n          },\n        };\n        const textPart = {\n          text: \"Extract all text content from the provided document. Respond only with the extracted text, without any additional commentary or formatting. The dialogues should be kept in quotation marks to signify that they have to be spoken with emotion.\"\n        };\n\n        if (!this.client) {\n             throw new Error('GoogleGenAI client not initialized.');\n        }\n\n        const response = await this.client.models.generateContent({\n          model: 'gemini-2.5-flash-preview-04-17', \n          contents: { parts: [filePart, textPart] },\n        });\n\n        const extractedText = response.text;\n        if (extractedText && extractedText.trim().length > 0) {\n          this.updateStatus(`File processed. Text extracted by Gemini for system instruction from ${file.name}.`);\n          return extractedText.trim();\n        } else {\n          throw new Error(`No text was extracted from ${file.name} by Gemini, or the extracted text was empty.`);\n        }\n        */\n      }\n    } catch (e: any) {\n      console.error(`Error processing file ${file.name}:`, e);\n      this.updateError(`Error processing ${file.name}: ${e.message || e}`);\n      this.updateStatus(`Failed to process ${file.name}.`);\n      return null;\n    } finally {\n      this.isFileProcessing = false;\n    }\n  }\n\n  private initClientOnly() {\n    console.log('GdmLiveAudio initClientOnly called');\n    \n    // Initialize audio first\n    this.initAudio();\n    \n    // Check for API key first\n    if (!this._apiKey) {\n      console.log('API key not provided, skipping client initialization');\n        return;\n    }\n\n    // Don't reinitialize if client already exists\n    if (this.client) {\n        console.log('GoogleGenAI client already initialized');\n        return;\n    }\n\n    try {\n        console.log('Attempting to create GoogleGenAI client');\n        this.updateStatus('Connecting to Google AI client...');\n        this.client = new GoogleGenAI({\n            apiKey: this._apiKey,\n        });\n        console.log('GoogleGenAI client created successfully');\n        \n        // Connect output node\n        this.outputNode.connect(this.outputAudioContext.destination);\n        console.log('outputNode connected');\n        \n        // Update status\n        this.updateStatus('Google AI client initialized successfully');\n    } catch (error: any) {\n        console.error('Error during initClientOnly:', error);\n        this.updateError(`Initialization error: ${error.message || error}`);\n        console.log('initClientOnly stopped due to error');\n        this.client = undefined; // Reset client on error\n    }\n  }\n\n  private async handleFileChange(event: Event) {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n      if (file.size > MAX_FILE_SIZE_BYTES) {\n        this.updateError(`File \"${file.name}\" exceeds 20MB limit.`);\n        this.updateStatus(`File too large (max 20MB). Select another file.`);\n        this.selectedFile = null;\n        input.value = ''; \n        return;\n      }\n      // Check if file is a text file\n      if (!file.name.toLowerCase().endsWith('.txt')) {\n        this.updateError(`Only .txt files are supported.`);\n        this.updateStatus(`Please select a .txt file.`);\n        this.selectedFile = null;\n        input.value = ''; \n        return;\n      }\n      this.selectedFile = file;\n      this.updateStatus(`File '${this.selectedFile.name}' selected. Click \"Process File\".`);\n      this.isSessionInitialized = false; \n      this.systemInstructionFromFile = null;\n      this.updateError(''); \n    } else {\n      this.selectedFile = null;\n      this.updateStatus('Please select a .txt file, then click \"Process File\".');\n    }\n  }\n\n  private handleManualInstructionInput(event: Event) {\n    const textarea = event.target as HTMLTextAreaElement;\n    this.manualSystemInstruction = textarea.value;\n    if (this.manualSystemInstruction.trim() === '') {\n        this.status = 'Type your system instructions, then click \"Apply Manual Instructions\".';\n    } else {\n        this.status = 'Instructions entered. Click \"Apply Manual Instructions\".';\n    }\n    this.isSessionInitialized = false;\n    this.updateError('');\n  }\n\n  async triggerFileProcessing() {\n    if (!this.selectedFile) {\n      this.updateError(\"No file selected to process.\");\n      return;\n    }\n    if (this.isFileProcessing) return;\n\n     if (this.selectedFile.size > MAX_FILE_SIZE_BYTES) {\n        this.updateError(`File \"${this.selectedFile.name}\" exceeds 20MB limit and cannot be processed.`);\n        this.updateStatus(`File \"${this.selectedFile.name}\" is too large (Max 20MB).`);\n        this.selectedFile = null;\n        const fileUploadElement = this.shadowRoot?.getElementById('fileUpload') as HTMLInputElement;\n        if (fileUploadElement) fileUploadElement.value = '';\n        return;\n    }\n\n    this.isSessionInitialized = false; \n    this.updateError(''); \n    try {\n      const extractedText = await this.extractTextFromFileContent(this.selectedFile);\n      if (extractedText) {\n        this.systemInstructionFromFile = extractedText;\n        await this.initSession(extractedText, `from file \"${this.selectedFile?.name}\"`);\n      } else {\n        if (!this.error) { \n             this.updateStatus(`File processing did not yield text from ${this.selectedFile.name}. Using default system instruction.`);\n        }\n        await this.initSession(null, \"default (file processing failed)\"); \n      }\n    } catch (e: any) { \n      this.updateError(`Failed to read or process file: ${e.message}`);\n      this.updateStatus(`Error with ${this.selectedFile.name}. Using default system instruction.`);\n      await this.initSession(null, \"default (file processing error)\");\n    }\n  }\n\n  async applyManualInstructions() {\n    if (this.isFileProcessing || this.isRecording) return;\n    if (!this.manualSystemInstruction.trim()) {\n      this.updateError(\"Manual system instruction cannot be empty.\");\n      this.updateStatus(\"Please enter system instructions before applying.\");\n      return;\n    }\n\n    this.isSessionInitialized = false;\n    this.updateError('');\n    this.updateStatus('Applying manual system instruction...');\n    await this.initSession(this.manualSystemInstruction.trim(), \"from manual input\");\n  }\n\n\n  private async initSession(systemInstructionText?: string | null, sourceDescription?: string) {\n    console.log('GdmLiveAudio initSession called');\n    if (this.session) {\n        try {\n            await this.session.close();\n        } catch (e) {\n            console.warn('Could not close previous session cleanly:', e);\n        }\n        this.session = null;\n    }\n\n    if (!this.client) {\n        console.error('GoogleGenAI client is not initialized in initSession.');\n        this.updateError('Initialization error: GoogleGenAI client not available.');\n        console.log('initSession stopped: client not available');\n        return;\n    }\n\n    const resolvedSystemInstructionText = systemInstructionText || \"You are an interactive ai with dialogue abilities.\";\n    const finalSourceDescription = sourceDescription || \"default\";\n    \n    console.log(`Applying system instruction (${finalSourceDescription}): \"${resolvedSystemInstructionText.substring(0, 100)}${resolvedSystemInstructionText.length > 100 ? '...' : ''}\"`);\n\n    const systemInstructionConfig = {\n        parts: [{ text: resolvedSystemInstructionText }],\n    };\n\n    this.updateStatus(`Using instruction ${finalSourceDescription}. Initializing audio session...`);\n    \n    try {\n      this.session = await this.client.live.connect({\n        model: this._model,\n        callbacks: {\n          onopen: () => {\n            this.updateStatus(`Instruction ${finalSourceDescription} applied. Press 🔴 to start audio session.`);\n            this.isSessionInitialized = true;\n          },\n          onmessage: async (message: LiveServerMessage) => {\n            const audio =\n              message.serverContent?.modelTurn?.parts?.[0]?.inlineData;\n\n            if (audio && audio.data) {\n              this.nextStartTime = Math.max(\n                this.nextStartTime,\n                this.outputAudioContext.currentTime,\n              );\n\n              try {\n                const audioBuffer = await decodeAudioData(\n                  decode(audio.data),\n                  this.outputAudioContext,\n                  24000,\n                  1,\n                );\n                 const source = this.outputAudioContext.createBufferSource();\n                source.buffer = audioBuffer;\n                source.connect(this.outputNode);\n                source.addEventListener('ended', () =>{\n                  this.sources.delete(source);\n                });\n\n                source.start(this.nextStartTime);\n                this.nextStartTime = this.nextStartTime + audioBuffer.duration;\n                this.sources.add(source);\n              } catch (e: any) {\n                  console.error('Error processing audio data:', e);\n                  this.updateError(`Audio processing error: ${e.message || e}`);\n              }\n            }\n\n            const interrupted = message.serverContent && message.serverContent.interrupted;\n            if(interrupted) {\n              for(const source of Array.from(this.sources.values())) {\n                try {\n                   source.stop();\n                } catch (e: any) {\n                   console.error('Error stopping audio source:', e);\n                }\n                this.sources.delete(source);\n              }\n              this.nextStartTime = 0;\n            }\n          },\n          onerror: (e: ErrorEvent) => {\n            console.error('Session Error:', e);\n            this.updateError(`Session Error: ${e.message || e.error || e}`);\n            this.isSessionInitialized = false;\n          },\n          onclose: (e: CloseEvent) => {\n            this.updateStatus(`Session Closed: ${e.reason || 'Unknown reason'}`);\n            this.isSessionInitialized = false;\n          },\n        },\n        config: {\n          responseModalities: [Modality.AUDIO],\n          speechConfig: {\n            voiceConfig: {prebuiltVoiceConfig: {voiceName: 'Orus'}},\n          },\n          systemInstruction: systemInstructionConfig,\n        },\n      });\n    } catch (e: any) {\n      console.error('Failed to initialize session:', e);\n      this.updateError(`Failed to initialize session: ${e.message}`);\n      this.updateStatus('Error initializing audio session.');\n      this.isSessionInitialized = false;\n    }\n  }\n\n  private updateStatus(msg: string) {\n    this.status = msg;\n    console.log(\"Status:\", msg);\n  }\n\n  private updateError(msg: string) {\n    if (this.errorTimeoutId) {\n      clearTimeout(this.errorTimeoutId);\n      this.errorTimeoutId = null;\n    }\n    this.error = msg; \n    if (msg) { \n      console.error(\"Error:\", msg);\n      this.errorTimeoutId = window.setTimeout(() => {\n        if (this.error === msg) { \n          this.error = ''; \n        }\n        this.errorTimeoutId = null; \n      }, 10000);\n    }\n  }\n\n  private async startRecording() {\n    if (this.isRecording || !this.isSessionInitialized) {\n      if (!this.isSessionInitialized) {\n          this.updateError(\"Session not ready. Apply system instructions first.\");\n      }\n      return;\n    }\n\n    this.inputAudioContext.resume();\n    this.updateStatus('Requesting microphone access...');\n    this.updateError('');\n\n    try {\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false,\n      });\n\n      this.updateStatus('Microphone access granted. Starting capture...');\n\n      this.sourceNode = this.inputAudioContext.createMediaStreamSource(\n        this.mediaStream,\n      );\n      this.sourceNode.connect(this.inputNode);\n\n      const bufferSize = 256;\n      this.scriptProcessorNode = this.inputAudioContext.createScriptProcessor(\n        bufferSize,\n        1,\n        1,\n      );\n\n      this.scriptProcessorNode.onaudioprocess = (audioProcessingEvent) => {\n        if (!this.isRecording || !this.session) return;\n        const inputBuffer = audioProcessingEvent.inputBuffer;\n        const pcmData = inputBuffer.getChannelData(0);\n        try {\n            this.session.sendRealtimeInput({media: createBlob(pcmData)});\n        } catch (e: any) {\n            console.error(\"Error sending real-time input:\", e);\n            this.updateError(`Error sending audio: ${e.message}`);\n        }\n      };\n\n      this.sourceNode.connect(this.scriptProcessorNode);\n      this.scriptProcessorNode.connect(this.inputAudioContext.destination);\n\n      this.isRecording = true;\n      this.updateStatus('🔴 Recording... Speak now. To stop the recording press 🟥');\n    } catch (err: any) {\n      console.error('Error starting recording:', err);\n      this.updateStatus(`Error starting recording: ${err.message}`);\n      this.updateError(`Error starting recording: ${err.message}`);\n      this.stopRecording(); \n    }\n  }\n\n  private stopRecording() {\n    const wasRecording = this.isRecording;\n    this.isRecording = false; \n\n    if (wasRecording) {\n        this.updateStatus('Stopping recording...');\n    }\n\n    if (this.scriptProcessorNode) {\n        this.scriptProcessorNode.disconnect();\n        this.scriptProcessorNode.onaudioprocess = null;\n        this.scriptProcessorNode = null;\n    }\n    if (this.sourceNode) {\n        this.sourceNode.disconnect();\n        this.sourceNode = null;\n    }\n\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach((track) => track.stop());\n      this.mediaStream = null;\n    }\n    \n    if (wasRecording) {\n        if (this.isSessionInitialized) {\n            this.updateStatus('Recording stopped. Press 🔴 to start again.');\n        } else {\n            this.updateStatus('Recording stopped. Session is not active.');\n        }\n    } else { // Not wasRecording - update status based on current mode if session isn't init\n        if (!this.isSessionInitialized) {\n             this.updateInitialStatus(); // Set status based on current instructionMode\n        }\n    }\n  }\n\n  private async reset() {\n    this.updateStatus('Resetting application...');\n    this.updateError('');\n    this.stopRecording();\n\n    if (this.session) {\n      try {\n        await this.session.close();\n      } catch (e: any) {\n        console.error('Error closing session during reset:', e);\n        this.updateError(`Error closing session: ${e.message}`);\n      }\n      this.session = null;\n    }\n    \n    this.selectedFile = null;\n    this.systemInstructionFromFile = null;\n    this.manualSystemInstruction = '';\n    this.isFileProcessing = false;\n    this.isSessionInitialized = false;\n    this.instructionMode = 'file'; // Default to file mode on reset\n    \n    const fileUploadElement = this.shadowRoot?.getElementById('fileUpload') as HTMLInputElement;\n    if (fileUploadElement) {\n        fileUploadElement.value = '';\n    }\n    const manualInstructionTextarea = this.shadowRoot?.getElementById('manualInstructionTextarea') as HTMLTextAreaElement;\n    if (manualInstructionTextarea) {\n        manualInstructionTextarea.value = '';\n    }\n    \n    this.updateInitialStatus(); // Set status based on reset mode\n  }\n\n  render() {\n    const commonDisabled = this.isRecording || this.isFileProcessing;\n    return html`\n      <div>\n        <div class=\"top-controls\">\n          <button\n            class=\"icon-button\"\n            id=\"resetButton\"\n            @click=${this.reset}\n            ?disabled=${this.isRecording}\n            title=\"Reset Session, File selection, and Manual Instructions\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"40px\" viewBox=\"0 -960 960 960\" width=\"40px\" fill=\"#ffffff\">\n              <path d=\"M480-160q-134 0-227-93t-93-227q0-134 93-227t227-93q69 0 132 28.5T720-690v-110h80v280H520v-80h168q-32-56-87.5-88T480-720q-100 0-170 70t-70 170q0 100 70 170t170 70q77 0 139-44t87-116h84q-28 106-114 173t-196 67Z\" />\n            </svg>\n          </button>\n          <button\n            class=\"icon-button\"\n            id=\"startButton\"\n            @click=${this.startRecording}\n            ?disabled=${commonDisabled || !this.isSessionInitialized}\n            title=\"Start Recording\">\n            <svg viewBox=\"0 0 100 100\" width=\"32px\" height=\"32px\" fill=\"#c80000\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"50\" cy=\"50\" r=\"50\" />\n            </svg>\n          </button>\n          <button\n            class=\"icon-button\"\n            id=\"stopButton\"\n            @click=${this.stopRecording}\n            ?disabled=${!this.isRecording}\n            title=\"Stop Recording\">\n            <svg viewBox=\"0 0 100 100\" width=\"32px\" height=\"32px\" fill=\"#c80000\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" rx=\"15\" />\n            </svg>\n          </button>\n        </div>\n\n        <div class=\"bottom-controls-wrapper\">\n          <div class=\"instruction-mode-selector\" role=\"radiogroup\" aria-label=\"System instruction input method\">\n            <button \n              role=\"radio\" \n              aria-checked=${this.instructionMode === 'file'}\n              ?active=${this.instructionMode === 'file'}\n              @click=${() => this.handleInstructionModeChange('file')}\n              ?disabled=${commonDisabled}\n              title=\"Upload a file for system instructions\">\n              Upload File\n            </button>\n            <button \n              role=\"radio\" \n              aria-checked=${this.instructionMode === 'manual'}\n              ?active=${this.instructionMode === 'manual'}\n              @click=${() => this.handleInstructionModeChange('manual')}\n              ?disabled=${commonDisabled}\n              title=\"Type system instructions manually\">\n              Type Manually\n            </button>\n          </div>\n\n          ${this.instructionMode === 'file' ? html`\n            <div class=\"file-controls-container\">\n              <input \n                type=\"file\" \n                id=\"fileUpload\" \n                accept=\".txt,text/plain\" \n                @change=${this.handleFileChange}\n                ?disabled=${commonDisabled}\n                aria-label=\"Select File for system instructions\"\n              />\n              <button \n                id=\"processFileButton\" \n                @click=${this.triggerFileProcessing} \n                ?disabled=${!this.selectedFile || commonDisabled}\n                title=\"Process selected file to extract system instructions\">\n                Process File\n              </button>\n            </div>\n          ` : ''}\n\n          ${this.instructionMode === 'manual' ? html`\n            <div class=\"manual-input-container\">\n              <textarea \n                id=\"manualInstructionTextarea\"\n                .value=${this.manualSystemInstruction}\n                @input=${this.handleManualInstructionInput}\n                ?disabled=${commonDisabled}\n                placeholder=\"Type system instructions here...\"\n                aria-label=\"Textarea for manual system instructions\"\n              ></textarea>\n              <button \n                id=\"applyManualInstructionButton\" \n                @click=${this.applyManualInstructions} \n                ?disabled=${!this.manualSystemInstruction.trim() || commonDisabled}\n                title=\"Apply manually entered system instructions\">\n                Apply Manual Instructions\n              </button>\n            </div>\n          ` : ''}\n        </div>\n\n        <div id=\"status\" role=\"status\" aria-live=\"polite\">\n         ${this.error ? html`<strong>Error:</strong> ${this.error}` : this.status}\n        </div>\n        <gdm-live-audio-visuals-3d\n          .inputNode=${this.inputNode}\n          .outputNode=${this.outputNode}></gdm-live-audio-visuals-3d>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface Window {\n    webkitAudioContext: typeof AudioContext;\n  }\n}\n","// Interactive Document Widget\n// This file bundles the entire Interactive Document application into a pluggable widget\n\n// Get configuration from global CONFIG object\nconst GLOBAL_API_KEY = window.CONFIG?.apiKey;\nconst MODEL_NAME = window.CONFIG?.model || 'gemini-2.5-flash-preview-native-audio-dialog';\n\n// Validate configuration\nif (!GLOBAL_API_KEY) {\n    console.error('API key not provided in CONFIG object');\n}\n\n// Import map for dependencies\nconst importMap = {\n  imports: {\n    \"lit\": \"https://esm.sh/lit@^3.3.0\",\n    \"lit/\": \"https://esm.sh/lit@^3.3.0/\",\n    \"@lit/context\": \"https://esm.sh/@lit/context@^1.1.5\",\n    \"three\": \"https://esm.sh/three@^0.176.0\",\n    \"three/\": \"https://esm.sh/three@^0.176.0/\"\n  }\n};\n\n// Add import map to document\nconst importMapScript = document.createElement('script');\nimportMapScript.type = 'importmap';\nimportMapScript.textContent = JSON.stringify(importMap);\ndocument.head.appendChild(importMapScript);\n\n// Import dependencies\nimport { LitElement, css, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { GoogleGenAI } from 'https://esm.sh/@google/genai@0.9.0';\nimport * as THREE from 'three';\nimport { GdmLiveAudio } from './index.tsx';\n\n// Set Lit to production mode\nwindow.lit = { devMode: false };\n\n// Default widget styles\nconst WIDGET_STYLES = `\n  .interactive-document-widget {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    background: #ffffff;\n    border-radius: 8px;\n    overflow: hidden;\n    display: block;\n  }\n\n  .widget-popup {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);\n    z-index: 1000;\n  }\n\n  .widget-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n  }\n\n  .widget-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n    background: #f5f5f5;\n    border-bottom: 1px solid #ddd;\n    border-radius: 8px 8px 0 0;\n  }\n\n  .widget-title {\n    margin: 0;\n    font-size: 18px;\n    color: #333;\n  }\n\n  .widget-close {\n    background: none;\n    border: none;\n    font-size: 24px;\n    color: #666;\n    cursor: pointer;\n    padding: 0;\n    line-height: 1;\n  }\n\n  .widget-close:hover {\n    color: #333;\n  }\n\n  gdm-live-audio {\n    display: block;\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n`;\n\nexport class InteractiveDocumentWidget {\n  constructor(config = {}) {\n    // Default configuration\n    this.config = {\n      apiKey: config.apiKey || GLOBAL_API_KEY,\n      model: config.model || MODEL_NAME,\n      width: config.width || '800px',\n      height: config.height || '600px',\n      ...config\n    };\n\n    // Initialize the widget\n    this.init();\n  }\n\n  async init() {\n    try {\n      // Create overlay\n      this.overlay = document.createElement('div');\n      this.overlay.className = 'widget-overlay';\n      \n      // Create popup container\n      this.widgetContainer = document.createElement('div');\n      this.widgetContainer.className = 'widget-popup';\n      this.widgetContainer.style.width = this.config.width;\n      this.widgetContainer.style.height = this.config.height;\n\n      // Create header\n      const header = document.createElement('div');\n      header.className = 'widget-header';\n      \n      const title = document.createElement('h3');\n      title.className = 'widget-title';\n      title.textContent = 'Interactive Document Widget';\n      \n      const closeButton = document.createElement('button');\n      closeButton.className = 'widget-close';\n      closeButton.textContent = '×';\n      closeButton.onclick = () => this.destroy();\n      \n      header.appendChild(title);\n      header.appendChild(closeButton);\n      \n      // Create widget content container\n      const contentContainer = document.createElement('div');\n      contentContainer.className = 'interactive-document-widget';\n      \n      // Add styles\n      const style = document.createElement('style');\n      style.textContent = WIDGET_STYLES;\n      document.head.appendChild(style);\n\n      // Initialize GdmLiveAudio\n      await this.initializeGdmLiveAudio(contentContainer);\n\n      // Assemble the popup\n      this.widgetContainer.appendChild(header);\n      this.widgetContainer.appendChild(contentContainer);\n      \n      // Add to document\n      document.body.appendChild(this.overlay);\n      document.body.appendChild(this.widgetContainer);\n      \n      console.log('Widget initialized with API key:', !!this.config.apiKey);\n    } catch (error) {\n      console.error('Failed to initialize widget:', error);\n      this.handleError(error);\n    }\n  }\n\n  async initializeGdmLiveAudio(container) {\n    try {\n      // Create the main element\n      this.mainElement = new GdmLiveAudio();\n      \n      // Set the API key and model\n      this.mainElement.apiKey = this.config.apiKey;\n      this.mainElement.model = this.config.model;\n      \n      // Verify API key was set\n      if (!this.mainElement.apiKey) {\n        throw new Error('Failed to set API key on GdmLiveAudio component');\n      }\n\n      // Append to container\n      container.appendChild(this.mainElement);\n      \n      console.log('GdmLiveAudio initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize GdmLiveAudio:', error);\n      this.handleError(error);\n    }\n  }\n\n  // Public methods for widget control\n  async start() {\n    if (this.mainElement && typeof this.mainElement.startRecording === 'function') {\n      await this.mainElement.startRecording();\n    }\n  }\n\n  async stop() {\n    if (this.mainElement && typeof this.mainElement.stopRecording === 'function') {\n      await this.mainElement.stopRecording();\n    }\n  }\n\n  async reset() {\n    if (this.mainElement && typeof this.mainElement.reset === 'function') {\n      await this.mainElement.reset();\n    }\n  }\n\n  // Error handling\n  handleError(error) {\n    console.error('Interactive Document Widget Error:', error);\n    if (this.widgetContainer) {\n      const errorDiv = document.createElement('div');\n      errorDiv.className = 'error-message';\n      errorDiv.textContent = `Widget Error: ${error.message}`;\n      this.widgetContainer.appendChild(errorDiv);\n    }\n  }\n\n  // Cleanup method\n  destroy() {\n    if (this.mainElement && typeof this.mainElement.stopRecording === 'function') {\n      this.mainElement.stopRecording();\n    }\n    if (this.overlay) {\n      this.overlay.remove();\n    }\n    if (this.widgetContainer) {\n      this.widgetContainer.remove();\n    }\n  }\n}\n\n// Auto-initialize when script loads\nif (typeof window !== 'undefined') {\n  // Create a global function to open the widget\n  window.openInteractiveDocumentWidget = function() {\n    new InteractiveDocumentWidget({\n      width: '800px',\n      height: '600px'\n    });\n  };\n}\n\n// Example usage (for embedding in another HTML page):"],"names":["t","e","o","s","n$2","r","n","S","c","i","h","a","l","p","d","u","f","b","y","encode","bytes","binary","len","decode","base64","binaryString","createBlob","data","int16","decodeAudioData","ctx","sampleRate","numChannels","buffer","dataInt16","dataFloat32","channelData","j","Analyser","node","u8","u16","i32","fleb","fdeb","clim","freb","eb","start","_a","fl","revfl","_b","fd","rev","x","hMap","cd","mb","le","co","rvb","sv","r_1","v","m","flt","fdt","flrm","fdrm","max","bits","bits16","shft","slc","ec","err","ind","msg","nt","inflt","dat","st","buf","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","final","pos","bt","lm","dm","lbt","dbt","tbts","type","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","lt","dt","lms","dms","lpos","sym","add","dsym","end","shift","dend","et","zls","unzlibSync","opts","td","tds","EXRLoader","DataTextureLoader","manager","HalfFloatType","logBase","reverseLutFromBitmap","bitmap","lut","k","hufClearDecTable","hdec","getBitsReturn","getBits","nBits","lc","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","hufCanonicalCodeTable","hcode","nc","hufUnpackEncTable","ni","im","iM","zerun","hufLength","code","hufCode","hufBuildDecTable","hdecod","pl","plOffset","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","UInt16","value","Int16","ref","wdec14Return","wdec14","ls","hi","ai","as","bs","wdec16","bb","aa","wav2Decode","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","hufDecode","encodingTable","decodingTable","no","outOffset","inOffsetEnd","index","hufUncompress","inDataView","nCompressed","nRaw","initialInOffset","parseUint32","freq","applyLut","nData","predictor","source","interleaveScalar","out","t1","t2","stop","decodeRunLength","size","reader","count","lossyDctDecode","cscSet","rowPtrs","acBuffer","dcBuffer","dataView","width","height","numComp","numFullBlocksX","numBlocksX","numBlocksY","leftoverX","leftoverY","currAcComp","currDcComp","dctData","halfZigBlock","rowBlock","rowOffsets","comp","blocky","maxY","maxX","blockx","unRleAC","unZigZag","dctInverse","csc709Inverse","convertToHalf","offset","src","halfRow","decodeFloat16","acValue","dctComp","dst","g","alpha","beta","theta","gamma","row","rowPtr","column","cb","cr","idx","DataUtils","toLinear","float","uncompressRAW","info","uncompressRLE","compressed","rawBuffer","tmpBuffer","uncompressZIP","fflate.unzlibSync","uncompressPIZ","outBufferEnd","pizChannelData","il","minNonZero","parseUint16","maxNonZero","parseUint8","maxValue","length","tmpOffset","cp","uncompressPXR","byteSize","viewer","tmpBufferEnd","writePtr","ptr","pixel","diff","uncompressDWA","dwaHeader","parseInt64","EXRHeader","channelRules","ruleSize","name","parseNullTerminatedString","compression","csc","channels","channel","rule","rleBuffer","zlibInfo","chan","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","parseFixedLengthString","parseRational","parseInt32","parseTimecode","Int32","Uint32","Uint8","int","parseFloat32","decodeFloat32","exponent","fraction","Uint16","parseFloat16","parseChlist","startOffset","pixelType","pLinear","xSampling","ySampling","parseChromaticities","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseCompression","compressionCodes","parseBox2i","xMin","yMin","xMax","yMax","parseLineOrder","lineOrders","lineOrder","parseEnvmap","envmaps","envmap","parseTiledesc","levelModes","roundingModes","xSize","ySize","modes","parseV2f","parseV3f","z","parseValue","roundLog2","mode","log2","calculateTileLevels","tiledesc","w","num","calculateTiles","dataSize","roundingMode","tiles","parseTiles","EXRDecoder","tile","tileX","tileY","startX","startY","bytesBlockLine","line","lineOffset","channelID","lOff","cOff","outLineOffset","outIndex","parseScanline","scanlineBlockIdx","bytesPerLine","line_y","scan_y","true_y","parseHeader","spec","keepReading","attributeName","attributeType","attributeSize","attributeValue","setupDecoder","outputType","LinearSRGBColorSpace","fillAlpha","FloatType","byteOffset","RGBAFormat","RedFormat","NoColorSpace","numXLevels","numXTiles","numYTiles","blockCount","bufferDataView","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","LinearFilter","CopyShader","Pass","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","Float32BufferAttribute","_geometry","FullScreenQuad","material","Mesh","renderer","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","writeBuffer","readBuffer","MaskPass","scene","camera","context","state","writeValue","clearValue","ClearMaskPass","EffectComposer","renderTarget","Vector2","WebGLRenderTarget","NoBlending","Clock","tmp","pass","passIndex","deltaTime","currentRenderTarget","maskActive","stencil","effectiveWidth","effectiveHeight","pixelRatio","RenderPass","overrideMaterial","clearColor","clearAlpha","Color","oldAutoClear","oldClearAlpha","oldOverrideMaterial","LuminosityHighPassShader","UnrealBloomPass","resolution","strength","radius","threshold","resx","resy","renderTargetHorizontal","renderTargetVertical","highPassShader","kernelSizeArray","bloomFactors","Vector3","AdditiveBlending","MeshBasicMaterial","inputRenderTarget","kernelRadius","coefficients","nMips","FXAAShader","vs","fs","GdmLiveAudioVisuals3D","LitElement","THREE","backdrop","backdropVS","backdropFS","geometry","pmremGenerator","sphereMaterial","sphereVS","sphere","exrCubeRenderTarget","error","renderPass","bloomPass","fxaaPass","composer","onWindowResize","dPR","backdropMaterial","euler","quaternion","vector","html","css","__decorateClass","property","customElement","AudioContextClass","MAX_FILE_SIZE_BYTES","GdmLiveAudio","oldValue","newMode","fileUploadElement","file","resolve","reject","base64Data","fileNameLower","text","GoogleGenAI","event","input","textarea","extractedText","systemInstructionText","sourceDescription","resolvedSystemInstructionText","finalSourceDescription","systemInstructionConfig","message","audio","audioBuffer","Modality","bufferSize","audioProcessingEvent","pcmData","wasRecording","track","manualInstructionTextarea","commonDisabled","GLOBAL_API_KEY","MODEL_NAME","importMap","importMapScript","WIDGET_STYLES","InteractiveDocumentWidget","config","header","title","closeButton","contentContainer","style","container","errorDiv"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17]}